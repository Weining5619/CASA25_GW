[
  {
    "objectID": "readme.html",
    "href": "readme.html",
    "title": "",
    "section": "",
    "text": "Use this repository to host a website for your CASA0025 final project by following these stpes:\n\nclone this repository\ninstall quarto\nedit the ‘index.qmd’ file with the contents of your project\nusing terminal, navigate to the project directory and run “quarto render”\npush the changes to your github repository\non github, navigate to Settings&gt;Pages&gt;Build and Deployment. Make sure that under “Source” it says “deploy from branch”. Under “Branch”, select “Main” in the first dropdown and “Docs” under the second drop down. Then press “Save”\n\nYour website should now be available under https://{your_username}.github.io/{your_repo_name}"
  },
  {
    "objectID": "code/gps_preprocessing.html",
    "href": "code/gps_preprocessing.html",
    "title": "",
    "section": "",
    "text": "INSTALL DUCKDB AND CONFIGURE IT\n%pip install duckdb duckdb-engine jupysql\n%pip install leafmap\n\nRequirement already satisfied: duckdb in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (1.2.1)\nRequirement already satisfied: duckdb-engine in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (0.15.0)\nRequirement already satisfied: jupysql in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (0.11.0)\nRequirement already satisfied: packaging&gt;=21 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from duckdb-engine) (24.2)\nRequirement already satisfied: sqlalchemy&gt;=1.3.22 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from duckdb-engine) (2.0.39)\nRequirement already satisfied: prettytable&gt;=3.12.0 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from jupysql) (3.15.1)\nRequirement already satisfied: sqlparse in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from jupysql) (0.5.3)\nRequirement already satisfied: ipython-genutils&gt;=0.1.0 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from jupysql) (0.2.0)\nRequirement already satisfied: jinja2 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from jupysql) (3.1.5)\nRequirement already satisfied: sqlglot&gt;=11.3.7 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from jupysql) (26.11.1)\nRequirement already satisfied: jupysql-plugin&gt;=0.4.2 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from jupysql) (0.4.5)\nRequirement already satisfied: ploomber-core&gt;=0.2.7 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from jupysql) (0.2.26)\nRequirement already satisfied: pyyaml in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from ploomber-core&gt;=0.2.7-&gt;jupysql) (6.0.2)\nRequirement already satisfied: posthog in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from ploomber-core&gt;=0.2.7-&gt;jupysql) (3.21.0)\nRequirement already satisfied: wcwidth in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from prettytable&gt;=3.12.0-&gt;jupysql) (0.2.13)\nRequirement already satisfied: greenlet!=0.4.17 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from sqlalchemy&gt;=1.3.22-&gt;duckdb-engine) (3.1.1)\nRequirement already satisfied: typing-extensions&gt;=4.6.0 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from sqlalchemy&gt;=1.3.22-&gt;duckdb-engine) (4.12.2)\nRequirement already satisfied: MarkupSafe&gt;=2.0 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from jinja2-&gt;jupysql) (3.0.2)\nRequirement already satisfied: requests&lt;3.0,&gt;=2.7 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from posthog-&gt;ploomber-core&gt;=0.2.7-&gt;jupysql) (2.32.3)\nRequirement already satisfied: six&gt;=1.5 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from posthog-&gt;ploomber-core&gt;=0.2.7-&gt;jupysql) (1.17.0)\nRequirement already satisfied: monotonic&gt;=1.5 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from posthog-&gt;ploomber-core&gt;=0.2.7-&gt;jupysql) (1.6)\nRequirement already satisfied: backoff&gt;=1.10.0 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from posthog-&gt;ploomber-core&gt;=0.2.7-&gt;jupysql) (2.2.1)\nRequirement already satisfied: python-dateutil&gt;2.1 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from posthog-&gt;ploomber-core&gt;=0.2.7-&gt;jupysql) (2.9.0.post0)\nRequirement already satisfied: distro&gt;=1.5.0 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from posthog-&gt;ploomber-core&gt;=0.2.7-&gt;jupysql) (1.9.0)\nRequirement already satisfied: charset_normalizer&lt;4,&gt;=2 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from requests&lt;3.0,&gt;=2.7-&gt;posthog-&gt;ploomber-core&gt;=0.2.7-&gt;jupysql) (3.4.1)\nRequirement already satisfied: idna&lt;4,&gt;=2.5 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from requests&lt;3.0,&gt;=2.7-&gt;posthog-&gt;ploomber-core&gt;=0.2.7-&gt;jupysql) (3.10)\nRequirement already satisfied: urllib3&lt;3,&gt;=1.21.1 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from requests&lt;3.0,&gt;=2.7-&gt;posthog-&gt;ploomber-core&gt;=0.2.7-&gt;jupysql) (2.3.0)\nRequirement already satisfied: certifi&gt;=2017.4.17 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from requests&lt;3.0,&gt;=2.7-&gt;posthog-&gt;ploomber-core&gt;=0.2.7-&gt;jupysql) (2024.12.14)\nNote: you may need to restart the kernel to use updated packages.\nRequirement already satisfied: leafmap in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (0.42.13)\nRequirement already satisfied: anywidget in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from leafmap) (0.9.16)\nRequirement already satisfied: bqplot in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from leafmap) (0.12.44)\nRequirement already satisfied: colour in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from leafmap) (0.1.5)\nRequirement already satisfied: duckdb in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from leafmap) (1.2.1)\nRequirement already satisfied: folium in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from leafmap) (0.19.4)\nRequirement already satisfied: gdown in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from leafmap) (5.2.0)\nRequirement already satisfied: geojson in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from leafmap) (3.2.0)\nRequirement already satisfied: ipyevents in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from leafmap) (2.0.2)\nRequirement already satisfied: ipyfilechooser in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from leafmap) (0.6.0)\nRequirement already satisfied: ipyleaflet in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from leafmap) (0.19.2)\nRequirement already satisfied: ipyvuetify in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from leafmap) (1.11.1)\nRequirement already satisfied: ipywidgets in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from leafmap) (8.1.5)\nRequirement already satisfied: matplotlib in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from leafmap) (3.10.0)\nRequirement already satisfied: numpy in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from leafmap) (2.0.2)\nRequirement already satisfied: pandas in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from leafmap) (2.2.3)\nRequirement already satisfied: plotly in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from leafmap) (6.0.0)\nRequirement already satisfied: psutil in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from leafmap) (6.1.1)\nRequirement already satisfied: pyshp in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from leafmap) (2.3.1)\nRequirement already satisfied: pystac-client in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from leafmap) (0.8.6)\nRequirement already satisfied: python-box in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from leafmap) (7.3.2)\nRequirement already satisfied: scooby in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from leafmap) (0.10.0)\nRequirement already satisfied: whiteboxgui in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from leafmap) (2.3.0)\nRequirement already satisfied: xyzservices in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from leafmap) (2024.9.0)\nRequirement already satisfied: psygnal&gt;=0.8.1 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from anywidget-&gt;leafmap) (0.12.0)\nRequirement already satisfied: typing-extensions&gt;=4.2.0 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from anywidget-&gt;leafmap) (4.12.2)\nRequirement already satisfied: comm&gt;=0.1.3 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from ipywidgets-&gt;leafmap) (0.2.2)\nRequirement already satisfied: ipython&gt;=6.1.0 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from ipywidgets-&gt;leafmap) (8.31.0)\nRequirement already satisfied: traitlets&gt;=4.3.1 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from ipywidgets-&gt;leafmap) (5.14.3)\nRequirement already satisfied: widgetsnbextension~=4.0.12 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from ipywidgets-&gt;leafmap) (4.0.13)\nRequirement already satisfied: jupyterlab_widgets~=3.0.12 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from ipywidgets-&gt;leafmap) (3.0.13)\nRequirement already satisfied: traittypes&gt;=0.0.6 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from bqplot-&gt;leafmap) (0.2.1)\nRequirement already satisfied: python-dateutil&gt;=2.8.2 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from pandas-&gt;leafmap) (2.9.0.post0)\nRequirement already satisfied: pytz&gt;=2020.1 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from pandas-&gt;leafmap) (2024.1)\nRequirement already satisfied: tzdata&gt;=2022.7 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from pandas-&gt;leafmap) (2024.2)\nRequirement already satisfied: branca&gt;=0.6.0 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from folium-&gt;leafmap) (0.8.1)\nRequirement already satisfied: jinja2&gt;=2.9 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from folium-&gt;leafmap) (3.1.5)\nRequirement already satisfied: requests in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from folium-&gt;leafmap) (2.32.3)\nRequirement already satisfied: beautifulsoup4 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from gdown-&gt;leafmap) (4.12.3)\nRequirement already satisfied: filelock in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from gdown-&gt;leafmap) (3.18.0)\nRequirement already satisfied: tqdm in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from gdown-&gt;leafmap) (4.67.1)\nRequirement already satisfied: jupyter-leaflet&lt;0.20,&gt;=0.19 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from ipyleaflet-&gt;leafmap) (0.19.2)\nRequirement already satisfied: ipyvue&lt;2,&gt;=1.7 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from ipyvuetify-&gt;leafmap) (1.11.2)\nRequirement already satisfied: contourpy&gt;=1.0.1 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from matplotlib-&gt;leafmap) (1.3.1)\nRequirement already satisfied: cycler&gt;=0.10 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from matplotlib-&gt;leafmap) (0.12.1)\nRequirement already satisfied: fonttools&gt;=4.22.0 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from matplotlib-&gt;leafmap) (4.55.3)\nRequirement already satisfied: kiwisolver&gt;=1.3.1 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from matplotlib-&gt;leafmap) (1.4.8)\nRequirement already satisfied: packaging&gt;=20.0 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from matplotlib-&gt;leafmap) (24.2)\nRequirement already satisfied: pillow&gt;=8 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from matplotlib-&gt;leafmap) (11.1.0)\nRequirement already satisfied: pyparsing&gt;=2.3.1 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from matplotlib-&gt;leafmap) (3.2.1)\nRequirement already satisfied: narwhals&gt;=1.15.1 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from plotly-&gt;leafmap) (1.24.1)\nRequirement already satisfied: pystac&gt;=1.10.0 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from pystac[validation]&gt;=1.10.0-&gt;pystac-client-&gt;leafmap) (1.12.2)\nRequirement already satisfied: ipytree in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from whiteboxgui-&gt;leafmap) (0.2.2)\nRequirement already satisfied: whitebox in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from whiteboxgui-&gt;leafmap) (2.3.6)\nRequirement already satisfied: colorama in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets-&gt;leafmap) (0.4.6)\nRequirement already satisfied: decorator in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets-&gt;leafmap) (5.1.1)\nRequirement already satisfied: jedi&gt;=0.16 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets-&gt;leafmap) (0.19.2)\nRequirement already satisfied: matplotlib-inline in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets-&gt;leafmap) (0.1.7)\nRequirement already satisfied: prompt_toolkit&lt;3.1.0,&gt;=3.0.41 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets-&gt;leafmap) (3.0.48)\nRequirement already satisfied: pygments&gt;=2.4.0 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets-&gt;leafmap) (2.19.1)\nRequirement already satisfied: stack_data in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets-&gt;leafmap) (0.6.3)\nRequirement already satisfied: MarkupSafe&gt;=2.0 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from jinja2&gt;=2.9-&gt;folium-&gt;leafmap) (3.0.2)\nRequirement already satisfied: jsonschema~=4.18 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from pystac[validation]&gt;=1.10.0-&gt;pystac-client-&gt;leafmap) (4.23.0)\nRequirement already satisfied: six&gt;=1.5 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from python-dateutil&gt;=2.8.2-&gt;pandas-&gt;leafmap) (1.17.0)\nRequirement already satisfied: charset_normalizer&lt;4,&gt;=2 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from requests-&gt;folium-&gt;leafmap) (3.4.1)\nRequirement already satisfied: idna&lt;4,&gt;=2.5 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from requests-&gt;folium-&gt;leafmap) (3.10)\nRequirement already satisfied: urllib3&lt;3,&gt;=1.21.1 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from requests-&gt;folium-&gt;leafmap) (2.3.0)\nRequirement already satisfied: certifi&gt;=2017.4.17 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from requests-&gt;folium-&gt;leafmap) (2024.12.14)\nRequirement already satisfied: soupsieve&gt;1.2 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from beautifulsoup4-&gt;gdown-&gt;leafmap) (2.5)\nRequirement already satisfied: PySocks!=1.5.7,&gt;=1.5.6 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from requests[socks]-&gt;gdown-&gt;leafmap) (1.7.1)\nRequirement already satisfied: Click&gt;=6.0 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from whitebox-&gt;whiteboxgui-&gt;leafmap) (8.1.8)\nRequirement already satisfied: parso&lt;0.9.0,&gt;=0.8.4 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from jedi&gt;=0.16-&gt;ipython&gt;=6.1.0-&gt;ipywidgets-&gt;leafmap) (0.8.4)\nRequirement already satisfied: attrs&gt;=22.2.0 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from jsonschema~=4.18-&gt;pystac[validation]&gt;=1.10.0-&gt;pystac-client-&gt;leafmap) (24.3.0)\nRequirement already satisfied: jsonschema-specifications&gt;=2023.03.6 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from jsonschema~=4.18-&gt;pystac[validation]&gt;=1.10.0-&gt;pystac-client-&gt;leafmap) (2024.10.1)\nRequirement already satisfied: referencing&gt;=0.28.4 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from jsonschema~=4.18-&gt;pystac[validation]&gt;=1.10.0-&gt;pystac-client-&gt;leafmap) (0.35.1)\nRequirement already satisfied: rpds-py&gt;=0.7.1 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from jsonschema~=4.18-&gt;pystac[validation]&gt;=1.10.0-&gt;pystac-client-&gt;leafmap) (0.22.3)\nRequirement already satisfied: wcwidth in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from prompt_toolkit&lt;3.1.0,&gt;=3.0.41-&gt;ipython&gt;=6.1.0-&gt;ipywidgets-&gt;leafmap) (0.2.13)\nRequirement already satisfied: executing&gt;=1.2.0 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from stack_data-&gt;ipython&gt;=6.1.0-&gt;ipywidgets-&gt;leafmap) (2.1.0)\nRequirement already satisfied: asttokens&gt;=2.1.0 in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from stack_data-&gt;ipython&gt;=6.1.0-&gt;ipywidgets-&gt;leafmap) (3.0.0)\nRequirement already satisfied: pure_eval in c:\\users\\fiorella\\anaconda3\\envs\\urbsim\\lib\\site-packages (from stack_data-&gt;ipython&gt;=6.1.0-&gt;ipywidgets-&gt;leafmap) (0.2.3)\nNote: you may need to restart the kernel to use updated packages.\nimport duckdb\nimport pandas as pd\nimport leafmap\nimport os\nimport zipfile\n# Import jupysql Jupyter extension to create SQL cells\n%load_ext sql\n\n%config SqlMagic.autopandas = True\n%config SqlMagic.feedback = False\n%config SqlMagic.displaycon = False\n%%sql\nduckdb:///:memory:\n\nINSTALL spatial;\nLOAD spatial;\n\nINSTALL httpfs;\nLOAD httpfs;\n\n\n\n\n\n\n\n\nSuccess\nLOAD DATA\n%%sql\nDROP TABLE IF EXISTS crane;\nCREATE TABLE crane AS SELECT * FROM 'white_naped_crane_data/White-naped crane Mongolia WSCC.csv';\n\n\n\n\n\n\n\n\nSuccess"
  },
  {
    "objectID": "code/gps_preprocessing.html#get-main-data-from-original-dataset",
    "href": "code/gps_preprocessing.html#get-main-data-from-original-dataset",
    "title": "",
    "section": "Get main data from original dataset",
    "text": "Get main data from original dataset\n\n%%sql\n-- get name of columns, type of variables and more info\nSELECT * FROM (DESCRIBE crane);\n\n\n\n\n\n\n\n\ncolumn_name\ncolumn_type\nnull\nkey\ndefault\nextra\n\n\n\n\n0\nevent-id\nBIGINT\nYES\nNone\nNone\nNone\n\n\n1\nvisible\nBOOLEAN\nYES\nNone\nNone\nNone\n\n\n2\ntimestamp\nTIMESTAMP\nYES\nNone\nNone\nNone\n\n\n3\nlocation-long\nDOUBLE\nYES\nNone\nNone\nNone\n\n\n4\nlocation-lat\nDOUBLE\nYES\nNone\nNone\nNone\n\n\n5\ngps:fix-type\nBIGINT\nYES\nNone\nNone\nNone\n\n\n6\ngps:hdop\nDOUBLE\nYES\nNone\nNone\nNone\n\n\n7\nground-speed\nDOUBLE\nYES\nNone\nNone\nNone\n\n\n8\nheading\nDOUBLE\nYES\nNone\nNone\nNone\n\n\n9\nheight-above-msl\nDOUBLE\nYES\nNone\nNone\nNone\n\n\n10\nmanually-marked-outlier\nVARCHAR\nYES\nNone\nNone\nNone\n\n\n11\ntag-voltage\nDOUBLE\nYES\nNone\nNone\nNone\n\n\n12\nsensor-type\nVARCHAR\nYES\nNone\nNone\nNone\n\n\n13\nindividual-taxon-canonical-name\nVARCHAR\nYES\nNone\nNone\nNone\n\n\n14\ntag-local-identifier\nDOUBLE\nYES\nNone\nNone\nNone\n\n\n15\nindividual-local-identifier\nBIGINT\nYES\nNone\nNone\nNone\n\n\n16\nstudy-name\nVARCHAR\nYES\nNone\nNone\nNone\n\n\n\n\n\n\n\nMAIN OPERATIONS AVAILABLE\n\n%%sql\n\nSELECT COUNT(*) FROM crane;\n\n\n\n\n\n\n\n\ncount_star()\n\n\n\n\n0\n234390\n\n\n\n\n\n\n\n\n%%sql\n\nSELECT * FROM crane LIMIT 10;\n\n\n\n\n\n\n\n\nevent-id\nvisible\ntimestamp\nlocation-long\nlocation-lat\ngps:fix-type\ngps:hdop\nground-speed\nheading\nheight-above-msl\nmanually-marked-outlier\ntag-voltage\nsensor-type\nindividual-taxon-canonical-name\ntag-local-identifier\nindividual-local-identifier\nstudy-name\n\n\n\n\n0\n2356091477\nTrue\n2014-08-09 08:28:09\n110.218422\n48.126228\n3\n3.5\n12.346667\nNaN\n1215.0\nNone\n3.66\ngps\nGrus vipio\n8.946080e+19\n27233186\nWhite-naped crane Mongolia WSCC\n\n\n1\n2356091577\nTrue\n2014-08-09 08:59:09\n110.335327\n48.204704\n3\n1.7\n12.346667\nNaN\n1241.0\nNone\n3.65\ngps\nGrus vipio\n8.946080e+19\n27233186\nWhite-naped crane Mongolia WSCC\n\n\n2\n2356091532\nTrue\n2014-08-09 09:27:39\n110.354172\n48.295742\n3\n4.5\n0.514444\nNaN\n909.0\nNone\n3.66\ngps\nGrus vipio\n8.946080e+19\n27233186\nWhite-naped crane Mongolia WSCC\n\n\n3\n2356091482\nTrue\n2014-08-09 09:58:09\n110.353500\n48.298092\n3\n2.5\n0.000000\nNaN\n1010.0\nNone\n3.66\ngps\nGrus vipio\n8.946080e+19\n27233186\nWhite-naped crane Mongolia WSCC\n\n\n4\n2356091504\nTrue\n2014-08-09 10:29:09\n110.354248\n48.297897\n3\n2.9\n0.000000\nNaN\n1133.0\nNone\n3.65\ngps\nGrus vipio\n8.946080e+19\n27233186\nWhite-naped crane Mongolia WSCC\n\n\n5\n2356091478\nTrue\n2014-08-09 10:58:40\n110.354210\n48.297924\n3\n1.4\n0.000000\nNaN\n1132.0\nNone\n3.65\ngps\nGrus vipio\n8.946080e+19\n27233186\nWhite-naped crane Mongolia WSCC\n\n\n6\n2356091533\nTrue\n2014-08-09 11:29:09\n110.354233\n48.297924\n3\n3.8\n0.000000\nNaN\n1133.0\nNone\n3.65\ngps\nGrus vipio\n8.946080e+19\n27233186\nWhite-naped crane Mongolia WSCC\n\n\n7\n2356091578\nTrue\n2014-08-09 11:43:09\n110.354218\n48.297981\n3\n1.7\n0.000000\nNaN\n1133.0\nNone\n3.65\ngps\nGrus vipio\n8.946080e+19\n27233186\nWhite-naped crane Mongolia WSCC\n\n\n8\n2356091483\nTrue\n2014-08-09 12:14:09\n110.354240\n48.297970\n3\n1.2\n0.000000\nNaN\n1133.0\nNone\n3.64\ngps\nGrus vipio\n8.946080e+19\n27233186\nWhite-naped crane Mongolia WSCC\n\n\n9\n2356091505\nTrue\n2014-08-09 12:44:03\n110.354179\n48.297890\n3\n1.5\n0.000000\nNaN\n1139.0\nNone\n3.63\ngps\nGrus vipio\n8.946080e+19\n27233186\nWhite-naped crane Mongolia WSCC\n\n\n\n\n\n\n\n\n%%sql\n\nSELECT MIN(timestamp), MAX(timestamp) FROM crane;\n\n\n\n\n\n\n\n\nmin(\"timestamp\")\nmax(\"timestamp\")\n\n\n\n\n0\n2013-08-13 00:29:39\n2021-04-10 23:02:45\n\n\n\n\n\n\n\n\n%%sql\n\nSELECT DISTINCT \"individual-local-identifier\" FROM crane\nLIMIT 14;\n\n\n\n\n\n\n\n\nindividual-local-identifier\n\n\n\n\n0\n27234135\n\n\n1\n27230893\n\n\n2\n27233947\n\n\n3\n52409530\n\n\n4\n27233186\n\n\n5\n52409548\n\n\n6\n27231081\n\n\n\n\n\n\n\n\n%%sql\n\nSELECT COUNT(DISTINCT \"individual-local-identifier\") FROM crane AS number_of_cranes;\n\n\n\n\n\n\n\n\ncount(DISTINCT \"individual-local-identifier\")\n\n\n\n\n0\n7\n\n\n\n\n\n\n\n\n%%sql\n\nSELECT \"individual-local-identifier\", COUNT(*) AS count\nFROM crane GROUP BY \"individual-local-identifier\";\n\n\n\n\n\n\n\n\nindividual-local-identifier\ncount\n\n\n\n\n0\n27233947\n79194\n\n\n1\n52409530\n11624\n\n\n2\n27234135\n41513\n\n\n3\n27230893\n13747\n\n\n4\n27233186\n17657\n\n\n5\n52409548\n86\n\n\n6\n27231081\n70569\n\n\n\n\n\n\n\n\nLOAD DATA USING PANDAS, CLEAN IT AND VISUALIZE IT\n\ndf = pd.read_csv('white_naped_crane_data/White-naped crane Mongolia WSCC.csv')\n\n\ndf.head()\n\n\n\n\n\n\n\n\nevent-id\nvisible\ntimestamp\nlocation-long\nlocation-lat\ngps:fix-type\ngps:hdop\nground-speed\nheading\nheight-above-msl\nmanually-marked-outlier\ntag-voltage\nsensor-type\nindividual-taxon-canonical-name\ntag-local-identifier\nindividual-local-identifier\nstudy-name\n\n\n\n\n0\n2356091477\nTrue\n2014-08-09 08:28:09.000\n110.218422\n48.126228\n3\n3.5\n12.346667\nNaN\n1215.0\nNaN\n3.66\ngps\nGrus vipio\n89460800120027233186\n27233186\nWhite-naped crane Mongolia WSCC\n\n\n1\n2356091577\nTrue\n2014-08-09 08:59:09.000\n110.335327\n48.204704\n3\n1.7\n12.346667\nNaN\n1241.0\nNaN\n3.65\ngps\nGrus vipio\n89460800120027233186\n27233186\nWhite-naped crane Mongolia WSCC\n\n\n2\n2356091532\nTrue\n2014-08-09 09:27:39.000\n110.354172\n48.295742\n3\n4.5\n0.514444\nNaN\n909.0\nNaN\n3.66\ngps\nGrus vipio\n89460800120027233186\n27233186\nWhite-naped crane Mongolia WSCC\n\n\n3\n2356091482\nTrue\n2014-08-09 09:58:09.000\n110.353500\n48.298092\n3\n2.5\n0.000000\nNaN\n1010.0\nNaN\n3.66\ngps\nGrus vipio\n89460800120027233186\n27233186\nWhite-naped crane Mongolia WSCC\n\n\n4\n2356091504\nTrue\n2014-08-09 10:29:09.000\n110.354248\n48.297897\n3\n2.9\n0.000000\nNaN\n1133.0\nNaN\n3.65\ngps\nGrus vipio\n89460800120027233186\n27233186\nWhite-naped crane Mongolia WSCC\n\n\n\n\n\n\n\n\ndf_clean = df[df['manually-marked-outlier'] != True]\n\n\nimport geopandas as gpd\nfrom shapely.geometry import Point\n\n# Create a GeoDataFrame from the DataFrame\ngeometry = [Point(xy) for xy in zip(df_clean['location-long'], df_clean['location-lat'])]\ngdf = gpd.GeoDataFrame(df_clean, geometry=geometry)\n\n# Set the coordinate reference system (CRS) to WGS84 (EPSG:4326)\ngdf.set_crs(epsg=4326, inplace=True)\n\n# Drop rows with NaN values in 'location-lat' and 'location-long' columns\ndf_clean = gdf.dropna(subset=['location-lat', 'location-long'])\n\n\nimport folium\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import rgb2hex\n\n\n# Create a map centered around the mean location\nmean_lat = df_clean['location-lat'].mean()\nmean_lon = df_clean['location-long'].mean()\nm = folium.Map(location=[mean_lat, mean_lon], zoom_start=5)  # Adjusted zoom level\n\n# Group the data by individual-local-identifier\ngrouped = df_clean.groupby('individual-local-identifier')\n\n# Generate a color map\ncolors = plt.cm.get_cmap('tab20', len(grouped))\ncolor_map = {name: colors(i) for i, name in enumerate(grouped.groups.keys())}\n\n# Add polylines and circle markers for each individual\nfor name, group in grouped:\n    color = rgb2hex(color_map[name])\n    locations = group.sort_values('timestamp')[['location-lat', 'location-long']].values.tolist()\n    folium.PolyLine(locations, color=color, weight=2.5, opacity=1).add_to(m)\n    for idx, row in group.iterrows():\n        folium.CircleMarker(\n            location=[row['location-lat'], row['location-long']],\n            radius=1,\n            color=color,\n            fill=True,\n            fill_color=color,\n        ).add_to(m)\n\n# Add a different tile layer\nfolium.TileLayer('CartoDB positron', attr='Map data © OpenStreetMap contributors').add_to(m)\n\n# Add layer control\nfolium.LayerControl().add_to(m)\n\n# Display the map\nm"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CASA00025 Group Project Title Here",
    "section": "",
    "text": "This project visualizes seasonal habitat use of the migratory White-naped Crane across East Asia. By integrating GPS tracking data with environmental indicators such as vegetation, temperature, pollution, and water availability, the application identifies critical hotspots and evaluates their ecological quality. Designed for conservation practitioners, the tool supports science-based advocacy by enabling users to generate evidence that informs policy and habitat protection. Built on Google Earth Engine, it offers an accessible, interactive interface to explore temporal patterns and argue for conservation priorities at regional and national levels.\n\n\nMigratory species like the White-naped Crane (Grus vipio) rely on multiple seasonal habitats across East Asia for survival. However, many of these areas—especially temporary stopover sites—are under threat from agricultural expansion, urban development, and climate variability (Wilcove and Wikelski, 2008). These habitats often fall outside existing protected areas and are ecologically important only during specific time windows. Because such spatiotemporal dynamics are difficult to observe and document, conservationists face challenges in presenting compelling scientific evidence that justifies habitat protection (Yanco et al., 2024; Runge et al., 2014).\n\n\n\nOur application is designed for conservationists and environmental NGOs who seek to protect migratory bird habitats. These users often struggle to communicate the ecological significance of dynamic, short-lived stopover areas to government bodies. By combining animal movement data with seasonal environmental indicators, our tool enables users to extract spatial evidence that supports conservation claims. This helps bridge the gap between scientific data and policy advocacy, empowering practitioners to argue more effectively for new or extended habitat protections (Rose et al., 2018).\n\n\n\nWe integrate multi-source remote sensing and ecological tracking datasets. White-naped Crane movement data comes from the “White-naped Crane Mongolia WSCC” study (Batbayar et al., 2024), which provides high-resolution GPS data via the Movebank Repository. Environmental conditions are assessed using MODIS NDVI for vegetation, NOAA CFSR for temperature, Sentinel-5P for pollution levels, and GLCF for inland water extent. Together, these datasets allow us to quantify the environmental quality of crane habitats across space and time (Turner et al., 2003).\n\n\n\nWe identify high-density crane hotspots using kernel-based smoothing of GPS point data. These areas are then evaluated using seasonal environmental metrics that correspond to ecological niche components such as vegetation availability, thermal conditions, water presence, and air quality (Yanco et al., 2024). The application allows users to select regions, filter by administrative or ecological criteria, and retrieve environmental summaries for any identified hotspot. This supports ecological comparisons across space, time, and protection status, making it easier to assess threats and justify targeted conservation actions.\n\n\n\nThe application is built on Google Earth Engine, offering a user-friendly interface for non-programmer conservation professionals. Users can explore interactive maps, filter hotspots by administrative boundaries or nature reserve proximity, and view detailed statistics by clicking on regions. A date slider enables seasonal comparison, while visualizations of NDVI, temperature, and pollution provide ecological context. By translating complex spatiotemporal data into actionable insights, the interface bridges the gap between ecological research and policy impact (Rose et al., 2018; Collen et al., 2013). The tool is intended to enhance the ability of users to advocate effectively for the protection of high-priority crane habitats.\n\n\n\n\n\n\n\n\n\n\n\n\n\nA1 initialises the map view at coordinates (120°E, 40°N) with Map.setCenter(120, 40, 4) and sets the basemap to satellite imagery via Map.setOptions('SATELLITE') for high-resolution land-cover visualization.\n// A1: Map Setup\n\nMap.setCenter(120, 40, 4);\nMap.setOptions('SATELLITE');\nA2 imports crane GPS data (cleaned_crane_below100), administrative boundaries (countries, provinces), protected areas (natural_reserves), and the area with cranes detected (convex_hull) using ee.FeatureCollection. Timestamps are added to crane data with .set('system:time_start') for the temporal analysis later.\n// A2: Data Imports\n\nvar cranes = ee.FeatureCollection('projects/casa25gw/assets/cleaned_crane_below100')\n    .map(function(f) {\n        return f.set('system:time_start', f.get('timestamp'));\n    });\nvar convex_hull = ee.FeatureCollection('projects/casa25gw/assets/convex_hull');\nvar natural_reserves = ee.FeatureCollection('projects/casa25gw/assets/natural_reserves');\nvar countries = ee.FeatureCollection('FAO/GAUL/2015/level0');\nvar provinces = ee.FeatureCollection('FAO/GAUL/2015/level1');\nA3 defines maskS2clouds(image) to remove cloud pixels using Sentinel-2’s QA60 band (bitwise checks for cloud shadows/cirrus) or legacy MSK_CLASSI bands.\n// A3: Sentinel‑2 Mask Function\n\nfunction maskS2clouds(image) {\n    var names = image.bandNames();\n    var mask = ee.Image(ee.Algorithms.If(\n        names.contains('QA60'),\n        image.select('QA60')\n        .bitwiseAnd(1 &lt;&lt; 10).eq(0)\n        .and(image.select('QA60')\n            .bitwiseAnd(1 &lt;&lt; 11).eq(0)),\n        image.select('MSK_CLASSI_OPAQUE').eq(0)\n        .and(image.select('MSK_CLASSI_CIRRUS').eq(0))\n        .and(image.select('MSK_CLASSI_SNOW_ICE').eq(0))\n    ));\n    return image.updateMask(mask)\n        .select('B.*')\n        .copyProperties(image, ['system:time_start']);\n    }\nA4 aggregates 2018–2021 seasonal environmental data: NDVI (MODIS, scaled ×0.0001), temperature (ERA5, converted from Kelvin), NO2 (Copernicus), and water presence (JRC). Uses safeMeanWithFallback to compute seasonal means, defaulting to annual averages if data is sparse. Clips results to convex_hull to constrain analysis to the crane migration corridor.\n// A4: Environmental Layers\n\nvar envStart = ee.Date('2018-01-01'),\n    envEnd = ee.Date('2021-12-31');\nvar ndviCol = ee.ImageCollection('MODIS/061/MOD13A1')\n    .filterDate(envStart, envEnd).select('NDVI');\nvar tempCol = ee.ImageCollection('ECMWF/ERA5/DAILY')\n    .filterDate(envStart, envEnd).select('mean_2m_air_temperature');\nvar no2Col = ee.ImageCollection('COPERNICUS/S5P/OFFL/L3_NO2')\n    .filterDate(envStart, envEnd).select('tropospheric_NO2_column_number_density');\nvar waterCol = ee.ImageCollection('JRC/GSW1_4/MonthlyHistory')\n    .filterDate(envStart, envEnd);\nvar seasons = {\n    Winter: ee.Filter.or(\n        ee.Filter.calendarRange(12, 12, 'month'),\n        ee.Filter.calendarRange(1, 2, 'month')),\n    Spring: ee.Filter.calendarRange(3, 5, 'month'),\n    Summer: ee.Filter.calendarRange(6, 8, 'month'),\n    Autumn: ee.Filter.calendarRange(9, 11, 'month')\n    };\nvar seasonNames = ee.List(['Winter', 'Spring', 'Summer', 'Autumn']);\nfunction safeMeanWithFallback(seasonCol, annualCol) {\n    return ee.Image(ee.Algorithms.If(\n        seasonCol.size().gt(0), seasonCol.mean(), annualCol.mean()\n    ));\n    }\nvar annual = {\n    NDVI: ndviCol,\n    Temp: tempCol,\n    NO2: no2Col\n    };\n\nvar envComposites = ee.Dictionary({\n    'Winter': {\n        NDVI: safeMeanWithFallback(ndviCol.filter(seasons.Winter), annual.NDVI)\n            .multiply(0.0001).rename('NDVI').clip(convex_hull),\n        Temp: safeMeanWithFallback(tempCol.filter(seasons.Winter), annual.Temp)\n            .subtract(273.15).rename('Temp').clip(convex_hull),\n        NO2: safeMeanWithFallback(no2Col.filter(seasons.Winter), annual.NO2)\n            .rename('NO2').clip(convex_hull),\n        Water: waterCol.filter(seasons.Winter)\n            .map(function(img) {\n                var valid = img.select('water').neq(0);\n                return img.select('water').eq(2).updateMask(valid);\n            })\n            .sum()\n            .divide(waterCol.filter(seasons.Winter).count())\n            .rename('Water')\n            .clip(convex_hull)\n    },\n    'Spring': {\n        NDVI: safeMeanWithFallback(ndviCol.filter(seasons.Spring), annual.NDVI)\n            .multiply(0.0001).rename('NDVI').clip(convex_hull),\n        Temp: safeMeanWithFallback(tempCol.filter(seasons.Spring), annual.Temp)\n            .subtract(273.15).rename('Temp').clip(convex_hull),\n        NO2: safeMeanWithFallback(no2Col.filter(seasons.Spring), annual.NO2)\n            .rename('NO2').clip(convex_hull),\n        Water: waterCol.filter(seasons.Spring)\n            .map(function(img) {\n                var valid = img.select('water').neq(0);\n                return img.select('water').eq(2).updateMask(valid);\n            })\n            .sum()\n            .divide(waterCol.filter(seasons.Spring).count())\n            .rename('Water')\n            .clip(convex_hull)\n    },\n    'Summer': {\n        NDVI: safeMeanWithFallback(ndviCol.filter(seasons.Summer), annual.NDVI)\n            .multiply(0.0001).rename('NDVI').clip(convex_hull),\n        Temp: safeMeanWithFallback(tempCol.filter(seasons.Summer), annual.Temp)\n            .subtract(273.15).rename('Temp').clip(convex_hull),\n        NO2: safeMeanWithFallback(no2Col.filter(seasons.Summer), annual.NO2)\n            .rename('NO2').clip(convex_hull),\n        Water: waterCol.filter(seasons.Summer)\n            .map(function(img) {\n                var valid = img.select('water').neq(0);\n                return img.select('water').eq(2).updateMask(valid);\n            })\n            .sum()\n            .divide(waterCol.filter(seasons.Summer).count())\n            .rename('Water')\n            .clip(convex_hull)\n    },\n    'Autumn': {\n        NDVI: safeMeanWithFallback(ndviCol.filter(seasons.Autumn), annual.NDVI)\n            .multiply(0.0001).rename('NDVI').clip(convex_hull),\n        Temp: safeMeanWithFallback(tempCol.filter(seasons.Autumn), annual.Temp)\n            .subtract(273.15).rename('Temp').clip(convex_hull),\n        NO2: safeMeanWithFallback(no2Col.filter(seasons.Autumn), annual.NO2)\n            .rename('NO2').clip(convex_hull),\n        Water: waterCol.filter(seasons.Autumn)\n            .map(function(img) {\n                var valid = img.select('water').neq(0);\n                return img.select('water').eq(2).updateMask(valid);\n            })\n            .sum()\n            .divide(waterCol.filter(seasons.Autumn).count())\n            .rename('Water')\n            .clip(convex_hull)\n    }\n    });\n\n\n\nB1 generates a density raster using a Gaussian kernel (10 km radius) applied to crane points via .reduceToImage(['count']). Reprojects to 1 km resolution (EPSG:4326) to balance detail and processing efficiency.\n// B1: Kernel & Density Image\n\nvar kernel = ee.Kernel.gaussian({\n    radius: 10000,\n    sigma: 10000,\n    units: 'meters'\n    });\n    \nvar densityImage = cranes\n    .map(function(f) {\n        return f.set('count', 1);\n    })\n    .reduceToImage(['count'], ee.Reducer.sum())\n    .convolve(kernel)\n    .reproject('EPSG:4326', null, 1000)\n    .clip(convex_hull);\nB2 computes the 90th percentile density threshold over convex_hull with reduceRegion, isolating the top 10% of high-density areas.\n// B2: Threshold Calculation\n\nvar threshold = densityImage\n    .reduceRegion({\n        reducer: ee.Reducer.percentile([90]),\n        geometry: convex_hull,\n        scale: 1000,\n        bestEffort: true\n    })\n    .values()\n    .getNumber(0);\nB3 converts threshold-exceeding pixels to polygons using reduceToVectors, buffers them by 300 m to account for GPS uncertainty, and enriches with the following attributes for each hotspot polygon:\n- peakSeason: Derived via .filter(seasons) to identify the season with maximum crane counts.\n- totalCranes: Total observations per polygon.\n- inReserve: Checks overlap with natural_reserves.\n// B3: Vectorize & Enrich Hotspots\n\nvar hotspotPolygons = densityImage\n    .gte(threshold)\n    .selfMask()\n    .reduceToVectors({\n        geometry: convex_hull,\n        scale: 500,\n        geometryType: 'polygon',\n        eightConnected: true,\n        reducer: ee.Reducer.countEvery()\n    })\n    .map(function(f) {\n        return f.buffer(300);\n    });\n    \nvar enrichedHotspots = hotspotPolygons.map(function(poly) {\n    var g = poly.geometry();\n    var counts = seasonNames.map(function(s) {\n        return cranes\n            .filter(ee.Dictionary(seasons).get(s))\n            .filterBounds(g)\n            .size();\n    });\n    var total = cranes.filterBounds(g).size();\n    var peak = seasonNames.get(\n        ee.List(counts).indexOf(ee.List(counts).reduce(ee.Reducer.max()))\n    );\n    var inRes = natural_reserves.filterBounds(g).size().gt(0);\n    return poly.set({\n            peakSeason: peak,\n            totalCranes: total,\n            inReserve: inRes\n        })\n        .setGeometry(poly.geometry().transform('EPSG:4326', 1));\n        });\nB4 styles map layers: countryBorder (black lines), natural_reserves (green semi-transparent polygons), and enrichedHotspots (red semi-transparent polygons) using Map.addLayer.\n// B4: Core Layers (Map Styling)\n\nMap.addLayer(\n  natural_reserves.style({\n    color: '#006400',\n    fillColor: '#00640088',\n    width: 1\n  }),\n  {},\n  'Nature Reserves',\n  true\n  );\n  \nvar countryBorder = ee.Image().byte().paint({\n  featureCollection: countries.filterBounds(cranes.geometry()),\n  color: 1,\n  width: 2\n  });\n  \nMap.addLayer(\n  countryBorder,\n  { palette: ['black'] },\n  'Country Border',\n  true\n  );\n  \nvar corridorOutline = ee.Image().byte().paint({\n  featureCollection: convex_hull,\n  color: 1,\n  width: 2\n  });\n  \nMap.addLayer(\n  corridorOutline,\n  { palette: ['white'] },\n  'Migration Corridor',\n  true\n  );\n  \nMap.addLayer(\n  enrichedHotspots.style({\n    color: 'red',\n    fillColor: '#FF000088',\n    width: 2\n  }),\n  {},\n  'Crane Hotspot (90th percentile)',\n  true\n);\n\n\n\nC1 creates a collapsible ui.Panel (350px width, top-left position) with a title, description, and data link. Uses CSS for readability (borderRadius: '6px').\n// C1: Main UI Panel Setup\n\nvar mainPanel = ui.Panel({\n  layout: ui.Panel.Layout.flow('vertical'),\n  style: {\n    position:       'top-left',       \n    padding:        '8px',\n    backgroundColor:'white',\n    border:         '1px solid #666',\n    borderRadius:   '6px',\n    width:          '350px',\n    maxHeight:      '80%'            \n  }\n  });\n\nmainPanel.add(ui.Label(\n  'Mapping Crane Density Hotspots to Guide Off‑Reserve Conservation',\n  { fontWeight:'bold', fontSize:'20px' }\n  ));\nmainPanel.add(ui.Label(\n  'This application maps 90th‑percentile, high‑density crane hotspots, many of which lie outside formally protected reserves, to inform off‑reserve conservation planning by displaying each hotspot’s peak‑season environmental drivers of habitat suitability. The dataset spans August 2013 through April 2021.',\n  { whiteSpace:'wrap', color:'gray', fontStyle:'italic', fontSize:'13px' }\n  ));\n\nvar dataLink = ui.Label(\n  'Click here for the crane source data (Batbayar et al. 2024)',\n  {\n    fontSize:       '12px',\n    color:          'blue',\n    fontStyle:      'italic',\n    textDecoration: 'underline'\n  },\n  {\n    targetUrl: 'https://datarepository.movebank.org/entities/datapackage/1e31df42-edfa-4225-b923-d8b0de83ab20'\n  }\n);\nmainPanel.add(dataLink);\nC2 populates countrySelect and provinceSelect dynamically using .aggregate_array('ADM0_NAME'), filtering jurisdictions intersecting hotspotPolygons to avoid users being overwhelmed with a long list of jurisdictions irrelevant to the task.\n// C2: Region Selector Sub‑Panel\n\nvar regionPanel = ui.Panel({\n  layout: ui.Panel.Layout.flow('vertical'),\n  style: { margin:'8px 0 0 0' }\n});\n\nmainPanel.add(regionPanel);\nregionPanel.add(ui.Label(\n  'Step 1: Select Your Region',\n  { fontWeight:'bold', fontSize:'14px' }\n));\nregionPanel.add(ui.Label(\n  'First choose a country to zoom in, then pick a province. The layers may take up to one minute to fully process after each click.',\n  { whiteSpace:'wrap', fontSize:'12px' }\n));\n\nvar countrySelect  = ui.Select({ placeholder:'Select Country' });\nvar provinceSelect = ui.Select({ placeholder:'Select Province' });\nregionPanel.add(ui.Label('Country:',  { fontWeight:'bold', fontSize:'12px' }));\nregionPanel.add(countrySelect);\nregionPanel.add(ui.Label('Province:', { fontWeight:'bold', fontSize:'12px' }));\nregionPanel.add(provinceSelect);\nC3 adds a homeButton to reset the map/UI and formats metadata displays as tables with addInfoRow.\n// C3: Info Panel & Home Button\n\nvar infoPanel = ui.Panel({ layout: ui.Panel.Layout.flow('vertical') });\nmainPanel.add(infoPanel);\n\nvar homeButton = ui.Button({\n  label: 'Home',\n  style: { stretch:'horizontal', margin:'8px 0 0 0' },\n  onClick: function() {\n    Map.setCenter(120, 40, 4);\n    Map.setOptions('SATELLITE');\n    Map.layers().forEach(function(l){\n      if (l.getName()==='Province Outline') Map.remove(l);\n    });\n    regionPanel.clear();\n    regionPanel.add(ui.Label(\n      'Step 1: Select Your Region',\n      { fontWeight:'bold', fontSize:'18px' }\n    ));\n    regionPanel.add(ui.Label(\n      'First choose a country to zoom in, then pick a province. The layers may take up to one minute to fully process after each click.',\n      { whiteSpace:'wrap', fontSize:'12px' }\n    ));\n    regionPanel.add(ui.Label('Country:',  { fontWeight:'bold', fontSize:'12px' }));\n    regionPanel.add(countrySelect);\n    regionPanel.add(ui.Label('Province:', { fontWeight:'bold', fontSize:'12px' }));\n    regionPanel.add(provinceSelect);\n    infoPanel.clear();\n    mainPanel.remove(homeButton);\n  }\n});\n\nMap.add(mainPanel);\n\nfunction addInfoRow(name, widget) {\n  infoPanel.add(ui.Panel([\n    ui.Label(name + ':', { fontWeight:'bold', fontSize:'12px' }),\n    widget\n  ], ui.Panel.Layout.flow('horizontal')));\n}\nC4-C5 updates province options and overlays province boundaries (provincesOutlineImage) on country selection for more detailed jurisdiction selection.\n// C4: Populate countries (Step 1)\n\nvar hotspotCountries = countries.filterBounds(hotspotPolygons.geometry());\nhotspotCountries.aggregate_array('ADM0_NAME')\n  .distinct().sort()\n  .evaluate(function(list) {\n    countrySelect.items().reset(list);\n  });\n\n// C5: Switch from countries to provinces (Step 1)\n\ncountrySelect.onChange(function(countryName) {\n  var provs = provinces\n    .filter(ee.Filter.eq('ADM0_NAME', countryName))\n    .filterBounds(hotspotPolygons.geometry())\n    .aggregate_array('ADM1_NAME')\n    .distinct()\n    .sort();\n\n  provs.evaluate(function(list) {\n    if (Array.isArray(list) && list.length) {\n      provinceSelect.items().reset(list);\n    } else {\n      provinceSelect.items().reset(['(No provinces)']);\n    }\n  });\n\n  var selectedCountryFeatures = hotspotCountries.filter(\n    ee.Filter.eq('ADM0_NAME', countryName)\n  );\n  Map.centerObject(selectedCountryFeatures, 5);\n\n  Map.layers().forEach(function(layer) {\n    if (layer.getName() === 'Province Outline') {\n      Map.remove(layer);\n    }\n  });\n\n  var provincesOutlineImage = ee.Image().byte().paint({\n    featureCollection: provinces.filter(ee.Filter.eq('ADM0_NAME', countryName)),\n    color: 1,\n    width: 1\n  });\n  Map.addLayer(\n    provincesOutlineImage,\n    { palette: ['black'] },\n    'Province Outline',\n    true\n  );\n});\nC6 prepares UI placeholders for environmental metrics (NDVI, Temp, etc.) but only computes values on hotspot click to avoid resource waste.\n// C6: Switch from provinces to info extraction (Step 2) \n\nprovinceSelect.onChange(function(provinceName) {\n  if (provinceName === '(No provinces)') return;\n  Map.centerObject(\n    provinces.filter(ee.Filter.eq('ADM1_NAME', provinceName)),\n    8\n  );\n  regionPanel.clear();\n  regionPanel.add(ui.Label(\n    'Step 2: Retrieve Hotspot Info',\n    { fontWeight:'bold', fontSize:'18px' }\n  ));\n  regionPanel.add(ui.Label(\n    'Click any hotspot to retrieve the its crane peak season, total cranes detected, and four important environmental components known to be important to aspects of crane natural history (Batbayar et al., 2024). The layers loading and computation may take up to one minute to process.',\n    { whiteSpace:'wrap', fontSize:'12px' }\n  ));\n  regionPanel.add(ui.Label('Peak Season:',      { fontWeight:'bold', fontSize:'12px' }));\n  regionPanel.add(ui.Label('Season with maximum crane density in the hotspot.', { whiteSpace:'wrap', fontSize:'12px' }));\n  regionPanel.add(ui.Label('Total Cranes:',      { fontWeight:'bold', fontSize:'12px' }));\n  regionPanel.add(ui.Label('Number of crane observations recorded in the hotspot.', { whiteSpace:'wrap', fontSize:'12px' }));\n  regionPanel.add(ui.Label('In Reserve:',       { fontWeight:'bold', fontSize:'12px' }));\n  regionPanel.add(ui.Label('Whether the hotspot overlaps a protected nature reserve.', { whiteSpace:'wrap', fontSize:'12px' }));\n  regionPanel.add(ui.Label('Average NDVI (Normalized Difference Vegetation Index):',     { fontWeight:'bold', fontSize:'12px' }));\n  regionPanel.add(ui.Label('Mean NDVI during peak season (2018–2021).', { whiteSpace:'wrap', fontSize:'12px' }));\n  regionPanel.add(ui.Label('Average Temp (°C):',{ fontWeight:'bold', fontSize:'12px' }));\n  regionPanel.add(ui.Label('Mean 2 m air temperature during peak season (2018–2021).',{ whiteSpace:'wrap', fontSize:'12px' }));\n  regionPanel.add(ui.Label('Average NO2:',      { fontWeight:'bold', fontSize:'12px' }));\n  regionPanel.add(ui.Label('Mean tropospheric NO2 column density during peak season (2018–2021).',{ whiteSpace:'wrap', fontSize:'12px' }));\n  regionPanel.add(ui.Label('Water Fraction:',   { fontWeight:'bold', fontSize:'12px' }));\n  regionPanel.add(ui.Label('Proportion of surface water presence during peak season (2018–2021).',{ whiteSpace:'wrap', fontSize:'12px' }));\n  \n});\nC7 triggers on map click:\n- Validates clicks on hotspots via enrichedHotspots.filterBounds(pt).first().\n- Computes environmental metrics using reduceRegion on a 500m buffer, with scale-dependent sampling (30m for water, 1000m for Temp/NO2).\n- Formats results: NO2 in scientific notation, NDVI to 3 decimals.\n// C7: Map click (Step 2)\n\nMap.onClick(function(coords) {\n  regionPanel.clear();                \n  infoPanel.clear();\n  var pt = ee.Geometry.Point([coords.lon, coords.lat]);\n  enrichedHotspots.filterBounds(pt).first().evaluate(function(f) {\n    if (!f) {\n      infoPanel.add(ui.Label('No hotspot here.'));\n    } else {\n      infoPanel.add(ui.Label(\n        'Hotspot Info',\n        { fontWeight:'bold', fontSize:'16px'}\n      ));\n      addInfoRow('- Peak Season',    ui.Label(f.properties.peakSeason));\n      addInfoRow('- Total Cranes',    ui.Label(f.properties.totalCranes));\n      addInfoRow('- In Reserve',      ui.Label(f.properties.inReserve?'Yes':'No'));\n      var placeholders = {};\n      [\n        {band:'NDVI', key:'- Average NDVI',     scale:500},\n        {band:'Temp', key:'- Average Temp (°C)',scale:1000},\n        {band:'NO2',  key:'- Average NO2',      scale:1000},\n        {band:'Water',key:'- Water Fraction',    scale:30}\n      ].forEach(function(o) {\n        var lbl = ui.Label('Calculating…');\n        placeholders[o.key] = lbl;\n        addInfoRow(o.key, lbl);\n      });\n      var dict = ee.Dictionary(envComposites.get(f.properties.peakSeason));\n      [\n        {band:'NDVI', key:'- Average NDVI',     scale:500},\n        {band:'Temp', key:'- Average Temp (°C)',scale:1000},\n        {band:'NO2',  key:'- Average NO2',      scale:1000},\n        {band:'Water',key:'- Water Fraction',    scale:30}\n      ].forEach(function(o) {\n        ee.Image(dict.get(o.band)).reduceRegion({\n          reducer: ee.Reducer.mean(),\n          geometry: pt.buffer(500),\n          scale:    o.scale,\n          maxPixels:1e9\n        }).evaluate(function(val) {\n          var raw = val && val[o.band];\n          var num = raw === null ? null : Number(raw);\n          var txt = num === null ? 'N/A'\n            : (o.key==='- Average NO2'\n               ? num.toExponential(2)\n               : num.toFixed(o.key==='- Average NDVI'?3:2));\n          placeholders[o.key].setValue(txt);\n        });\n      });\n    }\n    mainPanel.add(homeButton);\n  });\n});\nC8 adds a legend via makeLegendSymbol, using red (hotspots), white (corridor), and green (reserves) symbols positioned at the bottom-right.\n// C8: Legend\n\nvar legend = ui.Panel({\n  style: {\n    position: 'bottom-right', padding: '8px', backgroundColor: 'white'\n  }\n});\nlegend.add(ui.Label('Legend',\n  {fontWeight:'bold', fontSize:'16px', margin:'0 0 4px 0'}\n));\n\nfunction makeLegendSymbol(fillColor, borderColor, name) {\n  return ui.Panel([\n    ui.Label('', {\n      backgroundColor: fillColor,\n      padding: '8px',\n      margin:  '0 0 4px 0',\n      width:   '18px',\n      height:  '18px',\n      border:  '1px solid ' + borderColor\n    }),\n    ui.Label(name, {margin:'0 0 4px 6px'})\n  ], ui.Panel.Layout.flow('horizontal'));\n}\nlegend.add(makeLegendSymbol('rgba(255,0,0,0.53)', '#FF0000', 'Crane Hotspot'))\n      .add(makeLegendSymbol('#FFFFFF',         '#000000', 'Migration Corridor'))\n      .add(makeLegendSymbol('rgba(0,100,0,0.53)', '#006400', 'Nature Reserves'));\nMap.add(legend);\n\n\n\nBatbayar, N., Galtbalt, B., Natsagdorj, T., et al. (2024) White-naped crane Mongolia WSCC. Movebank Data Repository. Available at: https://doi.org/10.5441/001/1.600. Collen, B., Pettorelli, N., Baillie, J.E.M., et al. (2013) “Biodiversity Monitoring and Conservation: Bridging the Gaps Between Global Commitment and Local Action.” In Collen, B., Pettorelli, N., Baillie, J.E.M., et al. (eds.) Biodiversity Monitoring and Conservation. 1st ed. Wiley. pp. 1–16. doi:10.1002/9781118490747.ch1. Rose, D.C., Sutherland, W.J., Amano, T., et al. (2018) The major barriers to evidence‐informed conservation policy and possible solutions. Conservation Letters, 11 (5): e12564. doi:10.1111/conl.12564. Runge, C.A., Martin, T.G., Possingham, H.P., et al. (2014) Conserving mobile species. Frontiers in Ecology and the Environment, 12 (7): 395–402. doi:10.1890/130237. Turner, W., Spector, S., Gardiner, N., et al. (2003) Remote sensing for biodiversity science and conservation. Trends in ecology & evolution, 18 (6): 306–314. Wilcove, D.S. and Wikelski, M. (2008) Going, going, gone: is animal migration disappearing. PLoS biology, 6 (7): e188. Yanco, S.W., Oliver, R.Y., Iannarilli, F., et al. (2024) Migratory birds modulate niche tradeoffs in rhythm with seasons and life history. Proceedings of the National Academy of Sciences, 121 (41): e2316827121. doi:10.1073/pnas.2316827121."
  },
  {
    "objectID": "index.html#project-summary",
    "href": "index.html#project-summary",
    "title": "CASA00025 Group Project Title Here",
    "section": "",
    "text": "This project visualizes seasonal habitat use of the migratory White-naped Crane across East Asia. By integrating GPS tracking data with environmental indicators such as vegetation, temperature, pollution, and water availability, the application identifies critical hotspots and evaluates their ecological quality. Designed for conservation practitioners, the tool supports science-based advocacy by enabling users to generate evidence that informs policy and habitat protection. Built on Google Earth Engine, it offers an accessible, interactive interface to explore temporal patterns and argue for conservation priorities at regional and national levels.\n\n\nMigratory species like the White-naped Crane (Grus vipio) rely on multiple seasonal habitats across East Asia for survival. However, many of these areas—especially temporary stopover sites—are under threat from agricultural expansion, urban development, and climate variability (Wilcove and Wikelski, 2008). These habitats often fall outside existing protected areas and are ecologically important only during specific time windows. Because such spatiotemporal dynamics are difficult to observe and document, conservationists face challenges in presenting compelling scientific evidence that justifies habitat protection (Yanco et al., 2024; Runge et al., 2014).\n\n\n\nOur application is designed for conservationists and environmental NGOs who seek to protect migratory bird habitats. These users often struggle to communicate the ecological significance of dynamic, short-lived stopover areas to government bodies. By combining animal movement data with seasonal environmental indicators, our tool enables users to extract spatial evidence that supports conservation claims. This helps bridge the gap between scientific data and policy advocacy, empowering practitioners to argue more effectively for new or extended habitat protections (Rose et al., 2018).\n\n\n\nWe integrate multi-source remote sensing and ecological tracking datasets. White-naped Crane movement data comes from the “White-naped Crane Mongolia WSCC” study (Batbayar et al., 2024), which provides high-resolution GPS data via the Movebank Repository. Environmental conditions are assessed using MODIS NDVI for vegetation, NOAA CFSR for temperature, Sentinel-5P for pollution levels, and GLCF for inland water extent. Together, these datasets allow us to quantify the environmental quality of crane habitats across space and time (Turner et al., 2003).\n\n\n\nWe identify high-density crane hotspots using kernel-based smoothing of GPS point data. These areas are then evaluated using seasonal environmental metrics that correspond to ecological niche components such as vegetation availability, thermal conditions, water presence, and air quality (Yanco et al., 2024). The application allows users to select regions, filter by administrative or ecological criteria, and retrieve environmental summaries for any identified hotspot. This supports ecological comparisons across space, time, and protection status, making it easier to assess threats and justify targeted conservation actions.\n\n\n\nThe application is built on Google Earth Engine, offering a user-friendly interface for non-programmer conservation professionals. Users can explore interactive maps, filter hotspots by administrative boundaries or nature reserve proximity, and view detailed statistics by clicking on regions. A date slider enables seasonal comparison, while visualizations of NDVI, temperature, and pollution provide ecological context. By translating complex spatiotemporal data into actionable insights, the interface bridges the gap between ecological research and policy impact (Rose et al., 2018; Collen et al., 2013). The tool is intended to enhance the ability of users to advocate effectively for the protection of high-priority crane habitats."
  },
  {
    "objectID": "index.html#how-it-works",
    "href": "index.html#how-it-works",
    "title": "CASA00025 Group Project Title Here",
    "section": "",
    "text": "A1 initialises the map view at coordinates (120°E, 40°N) with Map.setCenter(120, 40, 4) and sets the basemap to satellite imagery via Map.setOptions('SATELLITE') for high-resolution land-cover visualization.\n// A1: Map Setup\n\nMap.setCenter(120, 40, 4);\nMap.setOptions('SATELLITE');\nA2 imports crane GPS data (cleaned_crane_below100), administrative boundaries (countries, provinces), protected areas (natural_reserves), and the area with cranes detected (convex_hull) using ee.FeatureCollection. Timestamps are added to crane data with .set('system:time_start') for the temporal analysis later.\n// A2: Data Imports\n\nvar cranes = ee.FeatureCollection('projects/casa25gw/assets/cleaned_crane_below100')\n    .map(function(f) {\n        return f.set('system:time_start', f.get('timestamp'));\n    });\nvar convex_hull = ee.FeatureCollection('projects/casa25gw/assets/convex_hull');\nvar natural_reserves = ee.FeatureCollection('projects/casa25gw/assets/natural_reserves');\nvar countries = ee.FeatureCollection('FAO/GAUL/2015/level0');\nvar provinces = ee.FeatureCollection('FAO/GAUL/2015/level1');\nA3 defines maskS2clouds(image) to remove cloud pixels using Sentinel-2’s QA60 band (bitwise checks for cloud shadows/cirrus) or legacy MSK_CLASSI bands.\n// A3: Sentinel‑2 Mask Function\n\nfunction maskS2clouds(image) {\n    var names = image.bandNames();\n    var mask = ee.Image(ee.Algorithms.If(\n        names.contains('QA60'),\n        image.select('QA60')\n        .bitwiseAnd(1 &lt;&lt; 10).eq(0)\n        .and(image.select('QA60')\n            .bitwiseAnd(1 &lt;&lt; 11).eq(0)),\n        image.select('MSK_CLASSI_OPAQUE').eq(0)\n        .and(image.select('MSK_CLASSI_CIRRUS').eq(0))\n        .and(image.select('MSK_CLASSI_SNOW_ICE').eq(0))\n    ));\n    return image.updateMask(mask)\n        .select('B.*')\n        .copyProperties(image, ['system:time_start']);\n    }\nA4 aggregates 2018–2021 seasonal environmental data: NDVI (MODIS, scaled ×0.0001), temperature (ERA5, converted from Kelvin), NO2 (Copernicus), and water presence (JRC). Uses safeMeanWithFallback to compute seasonal means, defaulting to annual averages if data is sparse. Clips results to convex_hull to constrain analysis to the crane migration corridor.\n// A4: Environmental Layers\n\nvar envStart = ee.Date('2018-01-01'),\n    envEnd = ee.Date('2021-12-31');\nvar ndviCol = ee.ImageCollection('MODIS/061/MOD13A1')\n    .filterDate(envStart, envEnd).select('NDVI');\nvar tempCol = ee.ImageCollection('ECMWF/ERA5/DAILY')\n    .filterDate(envStart, envEnd).select('mean_2m_air_temperature');\nvar no2Col = ee.ImageCollection('COPERNICUS/S5P/OFFL/L3_NO2')\n    .filterDate(envStart, envEnd).select('tropospheric_NO2_column_number_density');\nvar waterCol = ee.ImageCollection('JRC/GSW1_4/MonthlyHistory')\n    .filterDate(envStart, envEnd);\nvar seasons = {\n    Winter: ee.Filter.or(\n        ee.Filter.calendarRange(12, 12, 'month'),\n        ee.Filter.calendarRange(1, 2, 'month')),\n    Spring: ee.Filter.calendarRange(3, 5, 'month'),\n    Summer: ee.Filter.calendarRange(6, 8, 'month'),\n    Autumn: ee.Filter.calendarRange(9, 11, 'month')\n    };\nvar seasonNames = ee.List(['Winter', 'Spring', 'Summer', 'Autumn']);\nfunction safeMeanWithFallback(seasonCol, annualCol) {\n    return ee.Image(ee.Algorithms.If(\n        seasonCol.size().gt(0), seasonCol.mean(), annualCol.mean()\n    ));\n    }\nvar annual = {\n    NDVI: ndviCol,\n    Temp: tempCol,\n    NO2: no2Col\n    };\n\nvar envComposites = ee.Dictionary({\n    'Winter': {\n        NDVI: safeMeanWithFallback(ndviCol.filter(seasons.Winter), annual.NDVI)\n            .multiply(0.0001).rename('NDVI').clip(convex_hull),\n        Temp: safeMeanWithFallback(tempCol.filter(seasons.Winter), annual.Temp)\n            .subtract(273.15).rename('Temp').clip(convex_hull),\n        NO2: safeMeanWithFallback(no2Col.filter(seasons.Winter), annual.NO2)\n            .rename('NO2').clip(convex_hull),\n        Water: waterCol.filter(seasons.Winter)\n            .map(function(img) {\n                var valid = img.select('water').neq(0);\n                return img.select('water').eq(2).updateMask(valid);\n            })\n            .sum()\n            .divide(waterCol.filter(seasons.Winter).count())\n            .rename('Water')\n            .clip(convex_hull)\n    },\n    'Spring': {\n        NDVI: safeMeanWithFallback(ndviCol.filter(seasons.Spring), annual.NDVI)\n            .multiply(0.0001).rename('NDVI').clip(convex_hull),\n        Temp: safeMeanWithFallback(tempCol.filter(seasons.Spring), annual.Temp)\n            .subtract(273.15).rename('Temp').clip(convex_hull),\n        NO2: safeMeanWithFallback(no2Col.filter(seasons.Spring), annual.NO2)\n            .rename('NO2').clip(convex_hull),\n        Water: waterCol.filter(seasons.Spring)\n            .map(function(img) {\n                var valid = img.select('water').neq(0);\n                return img.select('water').eq(2).updateMask(valid);\n            })\n            .sum()\n            .divide(waterCol.filter(seasons.Spring).count())\n            .rename('Water')\n            .clip(convex_hull)\n    },\n    'Summer': {\n        NDVI: safeMeanWithFallback(ndviCol.filter(seasons.Summer), annual.NDVI)\n            .multiply(0.0001).rename('NDVI').clip(convex_hull),\n        Temp: safeMeanWithFallback(tempCol.filter(seasons.Summer), annual.Temp)\n            .subtract(273.15).rename('Temp').clip(convex_hull),\n        NO2: safeMeanWithFallback(no2Col.filter(seasons.Summer), annual.NO2)\n            .rename('NO2').clip(convex_hull),\n        Water: waterCol.filter(seasons.Summer)\n            .map(function(img) {\n                var valid = img.select('water').neq(0);\n                return img.select('water').eq(2).updateMask(valid);\n            })\n            .sum()\n            .divide(waterCol.filter(seasons.Summer).count())\n            .rename('Water')\n            .clip(convex_hull)\n    },\n    'Autumn': {\n        NDVI: safeMeanWithFallback(ndviCol.filter(seasons.Autumn), annual.NDVI)\n            .multiply(0.0001).rename('NDVI').clip(convex_hull),\n        Temp: safeMeanWithFallback(tempCol.filter(seasons.Autumn), annual.Temp)\n            .subtract(273.15).rename('Temp').clip(convex_hull),\n        NO2: safeMeanWithFallback(no2Col.filter(seasons.Autumn), annual.NO2)\n            .rename('NO2').clip(convex_hull),\n        Water: waterCol.filter(seasons.Autumn)\n            .map(function(img) {\n                var valid = img.select('water').neq(0);\n                return img.select('water').eq(2).updateMask(valid);\n            })\n            .sum()\n            .divide(waterCol.filter(seasons.Autumn).count())\n            .rename('Water')\n            .clip(convex_hull)\n    }\n    });\n\n\n\nB1 generates a density raster using a Gaussian kernel (10 km radius) applied to crane points via .reduceToImage(['count']). Reprojects to 1 km resolution (EPSG:4326) to balance detail and processing efficiency.\n// B1: Kernel & Density Image\n\nvar kernel = ee.Kernel.gaussian({\n    radius: 10000,\n    sigma: 10000,\n    units: 'meters'\n    });\n    \nvar densityImage = cranes\n    .map(function(f) {\n        return f.set('count', 1);\n    })\n    .reduceToImage(['count'], ee.Reducer.sum())\n    .convolve(kernel)\n    .reproject('EPSG:4326', null, 1000)\n    .clip(convex_hull);\nB2 computes the 90th percentile density threshold over convex_hull with reduceRegion, isolating the top 10% of high-density areas.\n// B2: Threshold Calculation\n\nvar threshold = densityImage\n    .reduceRegion({\n        reducer: ee.Reducer.percentile([90]),\n        geometry: convex_hull,\n        scale: 1000,\n        bestEffort: true\n    })\n    .values()\n    .getNumber(0);\nB3 converts threshold-exceeding pixels to polygons using reduceToVectors, buffers them by 300 m to account for GPS uncertainty, and enriches with the following attributes for each hotspot polygon:\n- peakSeason: Derived via .filter(seasons) to identify the season with maximum crane counts.\n- totalCranes: Total observations per polygon.\n- inReserve: Checks overlap with natural_reserves.\n// B3: Vectorize & Enrich Hotspots\n\nvar hotspotPolygons = densityImage\n    .gte(threshold)\n    .selfMask()\n    .reduceToVectors({\n        geometry: convex_hull,\n        scale: 500,\n        geometryType: 'polygon',\n        eightConnected: true,\n        reducer: ee.Reducer.countEvery()\n    })\n    .map(function(f) {\n        return f.buffer(300);\n    });\n    \nvar enrichedHotspots = hotspotPolygons.map(function(poly) {\n    var g = poly.geometry();\n    var counts = seasonNames.map(function(s) {\n        return cranes\n            .filter(ee.Dictionary(seasons).get(s))\n            .filterBounds(g)\n            .size();\n    });\n    var total = cranes.filterBounds(g).size();\n    var peak = seasonNames.get(\n        ee.List(counts).indexOf(ee.List(counts).reduce(ee.Reducer.max()))\n    );\n    var inRes = natural_reserves.filterBounds(g).size().gt(0);\n    return poly.set({\n            peakSeason: peak,\n            totalCranes: total,\n            inReserve: inRes\n        })\n        .setGeometry(poly.geometry().transform('EPSG:4326', 1));\n        });\nB4 styles map layers: countryBorder (black lines), natural_reserves (green semi-transparent polygons), and enrichedHotspots (red semi-transparent polygons) using Map.addLayer.\n// B4: Core Layers (Map Styling)\n\nMap.addLayer(\n  natural_reserves.style({\n    color: '#006400',\n    fillColor: '#00640088',\n    width: 1\n  }),\n  {},\n  'Nature Reserves',\n  true\n  );\n  \nvar countryBorder = ee.Image().byte().paint({\n  featureCollection: countries.filterBounds(cranes.geometry()),\n  color: 1,\n  width: 2\n  });\n  \nMap.addLayer(\n  countryBorder,\n  { palette: ['black'] },\n  'Country Border',\n  true\n  );\n  \nvar corridorOutline = ee.Image().byte().paint({\n  featureCollection: convex_hull,\n  color: 1,\n  width: 2\n  });\n  \nMap.addLayer(\n  corridorOutline,\n  { palette: ['white'] },\n  'Migration Corridor',\n  true\n  );\n  \nMap.addLayer(\n  enrichedHotspots.style({\n    color: 'red',\n    fillColor: '#FF000088',\n    width: 2\n  }),\n  {},\n  'Crane Hotspot (90th percentile)',\n  true\n);\n\n\n\nC1 creates a collapsible ui.Panel (350px width, top-left position) with a title, description, and data link. Uses CSS for readability (borderRadius: '6px').\n// C1: Main UI Panel Setup\n\nvar mainPanel = ui.Panel({\n  layout: ui.Panel.Layout.flow('vertical'),\n  style: {\n    position:       'top-left',       \n    padding:        '8px',\n    backgroundColor:'white',\n    border:         '1px solid #666',\n    borderRadius:   '6px',\n    width:          '350px',\n    maxHeight:      '80%'            \n  }\n  });\n\nmainPanel.add(ui.Label(\n  'Mapping Crane Density Hotspots to Guide Off‑Reserve Conservation',\n  { fontWeight:'bold', fontSize:'20px' }\n  ));\nmainPanel.add(ui.Label(\n  'This application maps 90th‑percentile, high‑density crane hotspots, many of which lie outside formally protected reserves, to inform off‑reserve conservation planning by displaying each hotspot’s peak‑season environmental drivers of habitat suitability. The dataset spans August 2013 through April 2021.',\n  { whiteSpace:'wrap', color:'gray', fontStyle:'italic', fontSize:'13px' }\n  ));\n\nvar dataLink = ui.Label(\n  'Click here for the crane source data (Batbayar et al. 2024)',\n  {\n    fontSize:       '12px',\n    color:          'blue',\n    fontStyle:      'italic',\n    textDecoration: 'underline'\n  },\n  {\n    targetUrl: 'https://datarepository.movebank.org/entities/datapackage/1e31df42-edfa-4225-b923-d8b0de83ab20'\n  }\n);\nmainPanel.add(dataLink);\nC2 populates countrySelect and provinceSelect dynamically using .aggregate_array('ADM0_NAME'), filtering jurisdictions intersecting hotspotPolygons to avoid users being overwhelmed with a long list of jurisdictions irrelevant to the task.\n// C2: Region Selector Sub‑Panel\n\nvar regionPanel = ui.Panel({\n  layout: ui.Panel.Layout.flow('vertical'),\n  style: { margin:'8px 0 0 0' }\n});\n\nmainPanel.add(regionPanel);\nregionPanel.add(ui.Label(\n  'Step 1: Select Your Region',\n  { fontWeight:'bold', fontSize:'14px' }\n));\nregionPanel.add(ui.Label(\n  'First choose a country to zoom in, then pick a province. The layers may take up to one minute to fully process after each click.',\n  { whiteSpace:'wrap', fontSize:'12px' }\n));\n\nvar countrySelect  = ui.Select({ placeholder:'Select Country' });\nvar provinceSelect = ui.Select({ placeholder:'Select Province' });\nregionPanel.add(ui.Label('Country:',  { fontWeight:'bold', fontSize:'12px' }));\nregionPanel.add(countrySelect);\nregionPanel.add(ui.Label('Province:', { fontWeight:'bold', fontSize:'12px' }));\nregionPanel.add(provinceSelect);\nC3 adds a homeButton to reset the map/UI and formats metadata displays as tables with addInfoRow.\n// C3: Info Panel & Home Button\n\nvar infoPanel = ui.Panel({ layout: ui.Panel.Layout.flow('vertical') });\nmainPanel.add(infoPanel);\n\nvar homeButton = ui.Button({\n  label: 'Home',\n  style: { stretch:'horizontal', margin:'8px 0 0 0' },\n  onClick: function() {\n    Map.setCenter(120, 40, 4);\n    Map.setOptions('SATELLITE');\n    Map.layers().forEach(function(l){\n      if (l.getName()==='Province Outline') Map.remove(l);\n    });\n    regionPanel.clear();\n    regionPanel.add(ui.Label(\n      'Step 1: Select Your Region',\n      { fontWeight:'bold', fontSize:'18px' }\n    ));\n    regionPanel.add(ui.Label(\n      'First choose a country to zoom in, then pick a province. The layers may take up to one minute to fully process after each click.',\n      { whiteSpace:'wrap', fontSize:'12px' }\n    ));\n    regionPanel.add(ui.Label('Country:',  { fontWeight:'bold', fontSize:'12px' }));\n    regionPanel.add(countrySelect);\n    regionPanel.add(ui.Label('Province:', { fontWeight:'bold', fontSize:'12px' }));\n    regionPanel.add(provinceSelect);\n    infoPanel.clear();\n    mainPanel.remove(homeButton);\n  }\n});\n\nMap.add(mainPanel);\n\nfunction addInfoRow(name, widget) {\n  infoPanel.add(ui.Panel([\n    ui.Label(name + ':', { fontWeight:'bold', fontSize:'12px' }),\n    widget\n  ], ui.Panel.Layout.flow('horizontal')));\n}\nC4-C5 updates province options and overlays province boundaries (provincesOutlineImage) on country selection for more detailed jurisdiction selection.\n// C4: Populate countries (Step 1)\n\nvar hotspotCountries = countries.filterBounds(hotspotPolygons.geometry());\nhotspotCountries.aggregate_array('ADM0_NAME')\n  .distinct().sort()\n  .evaluate(function(list) {\n    countrySelect.items().reset(list);\n  });\n\n// C5: Switch from countries to provinces (Step 1)\n\ncountrySelect.onChange(function(countryName) {\n  var provs = provinces\n    .filter(ee.Filter.eq('ADM0_NAME', countryName))\n    .filterBounds(hotspotPolygons.geometry())\n    .aggregate_array('ADM1_NAME')\n    .distinct()\n    .sort();\n\n  provs.evaluate(function(list) {\n    if (Array.isArray(list) && list.length) {\n      provinceSelect.items().reset(list);\n    } else {\n      provinceSelect.items().reset(['(No provinces)']);\n    }\n  });\n\n  var selectedCountryFeatures = hotspotCountries.filter(\n    ee.Filter.eq('ADM0_NAME', countryName)\n  );\n  Map.centerObject(selectedCountryFeatures, 5);\n\n  Map.layers().forEach(function(layer) {\n    if (layer.getName() === 'Province Outline') {\n      Map.remove(layer);\n    }\n  });\n\n  var provincesOutlineImage = ee.Image().byte().paint({\n    featureCollection: provinces.filter(ee.Filter.eq('ADM0_NAME', countryName)),\n    color: 1,\n    width: 1\n  });\n  Map.addLayer(\n    provincesOutlineImage,\n    { palette: ['black'] },\n    'Province Outline',\n    true\n  );\n});\nC6 prepares UI placeholders for environmental metrics (NDVI, Temp, etc.) but only computes values on hotspot click to avoid resource waste.\n// C6: Switch from provinces to info extraction (Step 2) \n\nprovinceSelect.onChange(function(provinceName) {\n  if (provinceName === '(No provinces)') return;\n  Map.centerObject(\n    provinces.filter(ee.Filter.eq('ADM1_NAME', provinceName)),\n    8\n  );\n  regionPanel.clear();\n  regionPanel.add(ui.Label(\n    'Step 2: Retrieve Hotspot Info',\n    { fontWeight:'bold', fontSize:'18px' }\n  ));\n  regionPanel.add(ui.Label(\n    'Click any hotspot to retrieve the its crane peak season, total cranes detected, and four important environmental components known to be important to aspects of crane natural history (Batbayar et al., 2024). The layers loading and computation may take up to one minute to process.',\n    { whiteSpace:'wrap', fontSize:'12px' }\n  ));\n  regionPanel.add(ui.Label('Peak Season:',      { fontWeight:'bold', fontSize:'12px' }));\n  regionPanel.add(ui.Label('Season with maximum crane density in the hotspot.', { whiteSpace:'wrap', fontSize:'12px' }));\n  regionPanel.add(ui.Label('Total Cranes:',      { fontWeight:'bold', fontSize:'12px' }));\n  regionPanel.add(ui.Label('Number of crane observations recorded in the hotspot.', { whiteSpace:'wrap', fontSize:'12px' }));\n  regionPanel.add(ui.Label('In Reserve:',       { fontWeight:'bold', fontSize:'12px' }));\n  regionPanel.add(ui.Label('Whether the hotspot overlaps a protected nature reserve.', { whiteSpace:'wrap', fontSize:'12px' }));\n  regionPanel.add(ui.Label('Average NDVI (Normalized Difference Vegetation Index):',     { fontWeight:'bold', fontSize:'12px' }));\n  regionPanel.add(ui.Label('Mean NDVI during peak season (2018–2021).', { whiteSpace:'wrap', fontSize:'12px' }));\n  regionPanel.add(ui.Label('Average Temp (°C):',{ fontWeight:'bold', fontSize:'12px' }));\n  regionPanel.add(ui.Label('Mean 2 m air temperature during peak season (2018–2021).',{ whiteSpace:'wrap', fontSize:'12px' }));\n  regionPanel.add(ui.Label('Average NO2:',      { fontWeight:'bold', fontSize:'12px' }));\n  regionPanel.add(ui.Label('Mean tropospheric NO2 column density during peak season (2018–2021).',{ whiteSpace:'wrap', fontSize:'12px' }));\n  regionPanel.add(ui.Label('Water Fraction:',   { fontWeight:'bold', fontSize:'12px' }));\n  regionPanel.add(ui.Label('Proportion of surface water presence during peak season (2018–2021).',{ whiteSpace:'wrap', fontSize:'12px' }));\n  \n});\nC7 triggers on map click:\n- Validates clicks on hotspots via enrichedHotspots.filterBounds(pt).first().\n- Computes environmental metrics using reduceRegion on a 500m buffer, with scale-dependent sampling (30m for water, 1000m for Temp/NO2).\n- Formats results: NO2 in scientific notation, NDVI to 3 decimals.\n// C7: Map click (Step 2)\n\nMap.onClick(function(coords) {\n  regionPanel.clear();                \n  infoPanel.clear();\n  var pt = ee.Geometry.Point([coords.lon, coords.lat]);\n  enrichedHotspots.filterBounds(pt).first().evaluate(function(f) {\n    if (!f) {\n      infoPanel.add(ui.Label('No hotspot here.'));\n    } else {\n      infoPanel.add(ui.Label(\n        'Hotspot Info',\n        { fontWeight:'bold', fontSize:'16px'}\n      ));\n      addInfoRow('- Peak Season',    ui.Label(f.properties.peakSeason));\n      addInfoRow('- Total Cranes',    ui.Label(f.properties.totalCranes));\n      addInfoRow('- In Reserve',      ui.Label(f.properties.inReserve?'Yes':'No'));\n      var placeholders = {};\n      [\n        {band:'NDVI', key:'- Average NDVI',     scale:500},\n        {band:'Temp', key:'- Average Temp (°C)',scale:1000},\n        {band:'NO2',  key:'- Average NO2',      scale:1000},\n        {band:'Water',key:'- Water Fraction',    scale:30}\n      ].forEach(function(o) {\n        var lbl = ui.Label('Calculating…');\n        placeholders[o.key] = lbl;\n        addInfoRow(o.key, lbl);\n      });\n      var dict = ee.Dictionary(envComposites.get(f.properties.peakSeason));\n      [\n        {band:'NDVI', key:'- Average NDVI',     scale:500},\n        {band:'Temp', key:'- Average Temp (°C)',scale:1000},\n        {band:'NO2',  key:'- Average NO2',      scale:1000},\n        {band:'Water',key:'- Water Fraction',    scale:30}\n      ].forEach(function(o) {\n        ee.Image(dict.get(o.band)).reduceRegion({\n          reducer: ee.Reducer.mean(),\n          geometry: pt.buffer(500),\n          scale:    o.scale,\n          maxPixels:1e9\n        }).evaluate(function(val) {\n          var raw = val && val[o.band];\n          var num = raw === null ? null : Number(raw);\n          var txt = num === null ? 'N/A'\n            : (o.key==='- Average NO2'\n               ? num.toExponential(2)\n               : num.toFixed(o.key==='- Average NDVI'?3:2));\n          placeholders[o.key].setValue(txt);\n        });\n      });\n    }\n    mainPanel.add(homeButton);\n  });\n});\nC8 adds a legend via makeLegendSymbol, using red (hotspots), white (corridor), and green (reserves) symbols positioned at the bottom-right.\n// C8: Legend\n\nvar legend = ui.Panel({\n  style: {\n    position: 'bottom-right', padding: '8px', backgroundColor: 'white'\n  }\n});\nlegend.add(ui.Label('Legend',\n  {fontWeight:'bold', fontSize:'16px', margin:'0 0 4px 0'}\n));\n\nfunction makeLegendSymbol(fillColor, borderColor, name) {\n  return ui.Panel([\n    ui.Label('', {\n      backgroundColor: fillColor,\n      padding: '8px',\n      margin:  '0 0 4px 0',\n      width:   '18px',\n      height:  '18px',\n      border:  '1px solid ' + borderColor\n    }),\n    ui.Label(name, {margin:'0 0 4px 6px'})\n  ], ui.Panel.Layout.flow('horizontal'));\n}\nlegend.add(makeLegendSymbol('rgba(255,0,0,0.53)', '#FF0000', 'Crane Hotspot'))\n      .add(makeLegendSymbol('#FFFFFF',         '#000000', 'Migration Corridor'))\n      .add(makeLegendSymbol('rgba(0,100,0,0.53)', '#006400', 'Nature Reserves'));\nMap.add(legend);\n\n\n\nBatbayar, N., Galtbalt, B., Natsagdorj, T., et al. (2024) White-naped crane Mongolia WSCC. Movebank Data Repository. Available at: https://doi.org/10.5441/001/1.600. Collen, B., Pettorelli, N., Baillie, J.E.M., et al. (2013) “Biodiversity Monitoring and Conservation: Bridging the Gaps Between Global Commitment and Local Action.” In Collen, B., Pettorelli, N., Baillie, J.E.M., et al. (eds.) Biodiversity Monitoring and Conservation. 1st ed. Wiley. pp. 1–16. doi:10.1002/9781118490747.ch1. Rose, D.C., Sutherland, W.J., Amano, T., et al. (2018) The major barriers to evidence‐informed conservation policy and possible solutions. Conservation Letters, 11 (5): e12564. doi:10.1111/conl.12564. Runge, C.A., Martin, T.G., Possingham, H.P., et al. (2014) Conserving mobile species. Frontiers in Ecology and the Environment, 12 (7): 395–402. doi:10.1890/130237. Turner, W., Spector, S., Gardiner, N., et al. (2003) Remote sensing for biodiversity science and conservation. Trends in ecology & evolution, 18 (6): 306–314. Wilcove, D.S. and Wikelski, M. (2008) Going, going, gone: is animal migration disappearing. PLoS biology, 6 (7): e188. Yanco, S.W., Oliver, R.Y., Iannarilli, F., et al. (2024) Migratory birds modulate niche tradeoffs in rhythm with seasons and life history. Proceedings of the National Academy of Sciences, 121 (41): e2316827121. doi:10.1073/pnas.2316827121."
  }
]