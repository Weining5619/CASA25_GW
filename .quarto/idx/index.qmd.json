{"title":"CASA00025 Group Project Title Here","markdown":{"headingText":"CASA00025 Group Project Title Here","containsRefs":false,"markdown":"\n## Project Summary\n\nThis project visualizes seasonal habitat use of the migratory White-naped Crane across East Asia. By integrating GPS tracking data with environmental indicators such as vegetation, temperature, pollution, and water availability, the application identifies critical hotspots and evaluates their ecological quality. Designed for conservation practitioners, the tool supports science-based advocacy by enabling users to generate evidence that informs policy and habitat protection. Built on Google Earth Engine, it offers an accessible, interactive interface to explore temporal patterns and argue for conservation priorities at regional and national levels.\n\n### Problem Statement\n\nMigratory species like the White-naped Crane (Grus vipio) rely on multiple seasonal habitats across East Asia for survival. However, many of these areas—especially temporary stopover sites—are under threat from agricultural expansion, urban development, and climate variability (Wilcove and Wikelski, 2008). These habitats often fall outside existing protected areas and are ecologically important only during specific time windows. Because such spatiotemporal dynamics are difficult to observe and document, conservationists face challenges in presenting compelling scientific evidence that justifies habitat protection (Yanco et al., 2024; Runge et al., 2014).\n\n### End User\n\nOur application is designed for conservationists and environmental NGOs who seek to protect migratory bird habitats. These users often struggle to communicate the ecological significance of dynamic, short-lived stopover areas to government bodies. By combining animal movement data with seasonal environmental indicators, our tool enables users to extract spatial evidence that supports conservation claims. This helps bridge the gap between scientific data and policy advocacy, empowering practitioners to argue more effectively for new or extended habitat protections (Rose et al., 2018).\n\n### Data\n\nWe integrate multi-source remote sensing and ecological tracking datasets. White-naped Crane movement data comes from the “White-naped Crane Mongolia WSCC” study (Batbayar et al., 2024), which provides high-resolution GPS data via the Movebank Repository. Environmental conditions are assessed using MODIS NDVI for vegetation, NOAA CFSR for temperature, Sentinel-5P for pollution levels, and GLCF for inland water extent. Together, these datasets allow us to quantify the environmental quality of crane habitats across space and time (Turner et al., 2003).\n\n### Methodology\n\nWe identify high-density crane hotspots using kernel-based smoothing of GPS point data. These areas are then evaluated using seasonal environmental metrics that correspond to ecological niche components such as vegetation availability, thermal conditions, water presence, and air quality (Yanco et al., 2024). The application allows users to select regions, filter by administrative or ecological criteria, and retrieve environmental summaries for any identified hotspot. This supports ecological comparisons across space, time, and protection status, making it easier to assess threats and justify targeted conservation actions.\n\n### Interface\n\nThe application is built on Google Earth Engine, offering a user-friendly interface for non-programmer conservation professionals. Users can explore interactive maps, filter hotspots by administrative boundaries or nature reserve proximity, and view detailed statistics by clicking on regions. A date slider enables seasonal comparison, while visualizations of NDVI, temperature, and pollution provide ecological context. By translating complex spatiotemporal data into actionable insights, the interface bridges the gap between ecological research and policy impact (Rose et al., 2018; Collen et al., 2013). The tool is intended to enhance the ability of users to advocate effectively for the protection of high-priority crane habitats.\n\n\n\n## The Application\n\n\n::: column-page\n<iframe src=\"https://ollielballinger.users.earthengine.app/view/turkey-earthquake\" width=\"100%\" height=\"700px\">\n\n</iframe>\n:::\n\n## How it Works\n\n### Section A: Data Setting  \n\n`A1` initialises the map view at coordinates (120°E, 40°N) with `Map.setCenter(120, 40, 4)` and sets the basemap to satellite imagery via `Map.setOptions('SATELLITE')` for high-resolution land-cover visualization. \n\n```js\n// A1: Map Setup\n\nMap.setCenter(120, 40, 4);\nMap.setOptions('SATELLITE');\n```\n\n`A2` imports crane GPS data (`cleaned_crane_below100`), administrative boundaries (`countries`, `provinces`), protected areas (`natural_reserves`), and the area with cranes detected (`convex_hull`) using `ee.FeatureCollection`. Timestamps are added to crane data with `.set('system:time_start')` for the temporal analysis later.  \n\n```js\n// A2: Data Imports\n\nvar cranes = ee.FeatureCollection('projects/casa25gw/assets/cleaned_crane_below100')\n    .map(function(f) {\n        return f.set('system:time_start', f.get('timestamp'));\n    });\nvar convex_hull = ee.FeatureCollection('projects/casa25gw/assets/convex_hull');\nvar natural_reserves = ee.FeatureCollection('projects/casa25gw/assets/natural_reserves');\nvar countries = ee.FeatureCollection('FAO/GAUL/2015/level0');\nvar provinces = ee.FeatureCollection('FAO/GAUL/2015/level1');\n```\n\n`A3` defines `maskS2clouds(image)` to remove cloud pixels using Sentinel-2’s `QA60` band (bitwise checks for cloud shadows/cirrus) or legacy `MSK_CLASSI` bands. \n\n```js\n// A3: Sentinel‑2 Mask Function\n\nfunction maskS2clouds(image) {\n    var names = image.bandNames();\n    var mask = ee.Image(ee.Algorithms.If(\n        names.contains('QA60'),\n        image.select('QA60')\n        .bitwiseAnd(1 << 10).eq(0)\n        .and(image.select('QA60')\n            .bitwiseAnd(1 << 11).eq(0)),\n        image.select('MSK_CLASSI_OPAQUE').eq(0)\n        .and(image.select('MSK_CLASSI_CIRRUS').eq(0))\n        .and(image.select('MSK_CLASSI_SNOW_ICE').eq(0))\n    ));\n    return image.updateMask(mask)\n        .select('B.*')\n        .copyProperties(image, ['system:time_start']);\n    }\n```\n\n`A4` aggregates 2018–2021 seasonal environmental data: NDVI (MODIS, scaled ×0.0001), temperature (ERA5, converted from Kelvin), NO2 (Copernicus), and water presence (JRC). Uses `safeMeanWithFallback` to compute seasonal means, defaulting to annual averages if data is sparse. Clips results to `convex_hull` to constrain analysis to the crane migration corridor.  \n\n```js\n// A4: Environmental Layers\n\nvar envStart = ee.Date('2018-01-01'),\n    envEnd = ee.Date('2021-12-31');\nvar ndviCol = ee.ImageCollection('MODIS/061/MOD13A1')\n    .filterDate(envStart, envEnd).select('NDVI');\nvar tempCol = ee.ImageCollection('ECMWF/ERA5/DAILY')\n    .filterDate(envStart, envEnd).select('mean_2m_air_temperature');\nvar no2Col = ee.ImageCollection('COPERNICUS/S5P/OFFL/L3_NO2')\n    .filterDate(envStart, envEnd).select('tropospheric_NO2_column_number_density');\nvar waterCol = ee.ImageCollection('JRC/GSW1_4/MonthlyHistory')\n    .filterDate(envStart, envEnd);\nvar seasons = {\n    Winter: ee.Filter.or(\n        ee.Filter.calendarRange(12, 12, 'month'),\n        ee.Filter.calendarRange(1, 2, 'month')),\n    Spring: ee.Filter.calendarRange(3, 5, 'month'),\n    Summer: ee.Filter.calendarRange(6, 8, 'month'),\n    Autumn: ee.Filter.calendarRange(9, 11, 'month')\n    };\nvar seasonNames = ee.List(['Winter', 'Spring', 'Summer', 'Autumn']);\nfunction safeMeanWithFallback(seasonCol, annualCol) {\n    return ee.Image(ee.Algorithms.If(\n        seasonCol.size().gt(0), seasonCol.mean(), annualCol.mean()\n    ));\n    }\nvar annual = {\n    NDVI: ndviCol,\n    Temp: tempCol,\n    NO2: no2Col\n    };\n\nvar envComposites = ee.Dictionary({\n    'Winter': {\n        NDVI: safeMeanWithFallback(ndviCol.filter(seasons.Winter), annual.NDVI)\n            .multiply(0.0001).rename('NDVI').clip(convex_hull),\n        Temp: safeMeanWithFallback(tempCol.filter(seasons.Winter), annual.Temp)\n            .subtract(273.15).rename('Temp').clip(convex_hull),\n        NO2: safeMeanWithFallback(no2Col.filter(seasons.Winter), annual.NO2)\n            .rename('NO2').clip(convex_hull),\n        Water: waterCol.filter(seasons.Winter)\n            .map(function(img) {\n                var valid = img.select('water').neq(0);\n                return img.select('water').eq(2).updateMask(valid);\n            })\n            .sum()\n            .divide(waterCol.filter(seasons.Winter).count())\n            .rename('Water')\n            .clip(convex_hull)\n    },\n    'Spring': {\n        NDVI: safeMeanWithFallback(ndviCol.filter(seasons.Spring), annual.NDVI)\n            .multiply(0.0001).rename('NDVI').clip(convex_hull),\n        Temp: safeMeanWithFallback(tempCol.filter(seasons.Spring), annual.Temp)\n            .subtract(273.15).rename('Temp').clip(convex_hull),\n        NO2: safeMeanWithFallback(no2Col.filter(seasons.Spring), annual.NO2)\n            .rename('NO2').clip(convex_hull),\n        Water: waterCol.filter(seasons.Spring)\n            .map(function(img) {\n                var valid = img.select('water').neq(0);\n                return img.select('water').eq(2).updateMask(valid);\n            })\n            .sum()\n            .divide(waterCol.filter(seasons.Spring).count())\n            .rename('Water')\n            .clip(convex_hull)\n    },\n    'Summer': {\n        NDVI: safeMeanWithFallback(ndviCol.filter(seasons.Summer), annual.NDVI)\n            .multiply(0.0001).rename('NDVI').clip(convex_hull),\n        Temp: safeMeanWithFallback(tempCol.filter(seasons.Summer), annual.Temp)\n            .subtract(273.15).rename('Temp').clip(convex_hull),\n        NO2: safeMeanWithFallback(no2Col.filter(seasons.Summer), annual.NO2)\n            .rename('NO2').clip(convex_hull),\n        Water: waterCol.filter(seasons.Summer)\n            .map(function(img) {\n                var valid = img.select('water').neq(0);\n                return img.select('water').eq(2).updateMask(valid);\n            })\n            .sum()\n            .divide(waterCol.filter(seasons.Summer).count())\n            .rename('Water')\n            .clip(convex_hull)\n    },\n    'Autumn': {\n        NDVI: safeMeanWithFallback(ndviCol.filter(seasons.Autumn), annual.NDVI)\n            .multiply(0.0001).rename('NDVI').clip(convex_hull),\n        Temp: safeMeanWithFallback(tempCol.filter(seasons.Autumn), annual.Temp)\n            .subtract(273.15).rename('Temp').clip(convex_hull),\n        NO2: safeMeanWithFallback(no2Col.filter(seasons.Autumn), annual.NO2)\n            .rename('NO2').clip(convex_hull),\n        Water: waterCol.filter(seasons.Autumn)\n            .map(function(img) {\n                var valid = img.select('water').neq(0);\n                return img.select('water').eq(2).updateMask(valid);\n            })\n            .sum()\n            .divide(waterCol.filter(seasons.Autumn).count())\n            .rename('Water')\n            .clip(convex_hull)\n    }\n    });\n```\n\n### Section B: Hotspot Extraction  \n\n`B1` generates a density raster using a Gaussian kernel (10 km radius) applied to crane points via `.reduceToImage(['count'])`. Reprojects to 1 km resolution (`EPSG:4326`) to balance detail and processing efficiency.  \n\n```js\n// B1: Kernel & Density Image\n\nvar kernel = ee.Kernel.gaussian({\n    radius: 10000,\n    sigma: 10000,\n    units: 'meters'\n    });\n    \nvar densityImage = cranes\n    .map(function(f) {\n        return f.set('count', 1);\n    })\n    .reduceToImage(['count'], ee.Reducer.sum())\n    .convolve(kernel)\n    .reproject('EPSG:4326', null, 1000)\n    .clip(convex_hull);\n```\n\n`B2` computes the 90th percentile density threshold over `convex_hull` with `reduceRegion`, isolating the top 10% of high-density areas.  \n\n```js\n// B2: Threshold Calculation\n\nvar threshold = densityImage\n    .reduceRegion({\n        reducer: ee.Reducer.percentile([90]),\n        geometry: convex_hull,\n        scale: 1000,\n        bestEffort: true\n    })\n    .values()\n    .getNumber(0);\n```\n\n`B3` converts threshold-exceeding pixels to polygons using `reduceToVectors`, buffers them by 300 m to account for GPS uncertainty, and enriches with the following attributes for each hotspot polygon:  \n - `peakSeason`: Derived via `.filter(seasons)` to identify the season with maximum crane counts.  \n - `totalCranes`: Total observations per polygon.  \n - `inReserve`: Checks overlap with `natural_reserves`.  \n\n```js\n// B3: Vectorize & Enrich Hotspots\n\nvar hotspotPolygons = densityImage\n    .gte(threshold)\n    .selfMask()\n    .reduceToVectors({\n        geometry: convex_hull,\n        scale: 500,\n        geometryType: 'polygon',\n        eightConnected: true,\n        reducer: ee.Reducer.countEvery()\n    })\n    .map(function(f) {\n        return f.buffer(300);\n    });\n    \nvar enrichedHotspots = hotspotPolygons.map(function(poly) {\n    var g = poly.geometry();\n    var counts = seasonNames.map(function(s) {\n        return cranes\n            .filter(ee.Dictionary(seasons).get(s))\n            .filterBounds(g)\n            .size();\n    });\n    var total = cranes.filterBounds(g).size();\n    var peak = seasonNames.get(\n        ee.List(counts).indexOf(ee.List(counts).reduce(ee.Reducer.max()))\n    );\n    var inRes = natural_reserves.filterBounds(g).size().gt(0);\n    return poly.set({\n            peakSeason: peak,\n            totalCranes: total,\n            inReserve: inRes\n        })\n        .setGeometry(poly.geometry().transform('EPSG:4326', 1));\n        });\n```\n\n`B4` styles map layers: `countryBorder` (black lines), `natural_reserves` (green semi-transparent polygons), and `enrichedHotspots` (red semi-transparent polygons) using `Map.addLayer`.  \n\n```js\n// B4: Core Layers (Map Styling)\n\nMap.addLayer(\n  natural_reserves.style({\n    color: '#006400',\n    fillColor: '#00640088',\n    width: 1\n  }),\n  {},\n  'Nature Reserves',\n  true\n  );\n  \nvar countryBorder = ee.Image().byte().paint({\n  featureCollection: countries.filterBounds(cranes.geometry()),\n  color: 1,\n  width: 2\n  });\n  \nMap.addLayer(\n  countryBorder,\n  { palette: ['black'] },\n  'Country Border',\n  true\n  );\n  \nvar corridorOutline = ee.Image().byte().paint({\n  featureCollection: convex_hull,\n  color: 1,\n  width: 2\n  });\n  \nMap.addLayer(\n  corridorOutline,\n  { palette: ['white'] },\n  'Migration Corridor',\n  true\n  );\n  \nMap.addLayer(\n  enrichedHotspots.style({\n    color: 'red',\n    fillColor: '#FF000088',\n    width: 2\n  }),\n  {},\n  'Crane Hotspot (90th percentile)',\n  true\n);\n```\n\n### Section C: UI Design \n\n`C1` creates a collapsible `ui.Panel` (350px width, top-left position) with a title, description, and data link. Uses CSS for readability (`borderRadius: '6px'`).  \n\n```js\n// C1: Main UI Panel Setup\n\nvar mainPanel = ui.Panel({\n  layout: ui.Panel.Layout.flow('vertical'),\n  style: {\n    position:       'top-left',       \n    padding:        '8px',\n    backgroundColor:'white',\n    border:         '1px solid #666',\n    borderRadius:   '6px',\n    width:          '350px',\n    maxHeight:      '80%'            \n  }\n  });\n\nmainPanel.add(ui.Label(\n  'Mapping Crane Density Hotspots to Guide Off‑Reserve Conservation',\n  { fontWeight:'bold', fontSize:'20px' }\n  ));\nmainPanel.add(ui.Label(\n  'This application maps 90th‑percentile, high‑density crane hotspots, many of which lie outside formally protected reserves, to inform off‑reserve conservation planning by displaying each hotspot’s peak‑season environmental drivers of habitat suitability. The dataset spans August 2013 through April 2021.',\n  { whiteSpace:'wrap', color:'gray', fontStyle:'italic', fontSize:'13px' }\n  ));\n\nvar dataLink = ui.Label(\n  'Click here for the crane source data (Batbayar et al. 2024)',\n  {\n    fontSize:       '12px',\n    color:          'blue',\n    fontStyle:      'italic',\n    textDecoration: 'underline'\n  },\n  {\n    targetUrl: 'https://datarepository.movebank.org/entities/datapackage/1e31df42-edfa-4225-b923-d8b0de83ab20'\n  }\n);\nmainPanel.add(dataLink);\n```\n\n`C2` populates `countrySelect` and `provinceSelect` dynamically using `.aggregate_array('ADM0_NAME')`, filtering jurisdictions intersecting `hotspotPolygons` to avoid users being overwhelmed with a long list of jurisdictions irrelevant to the task.\n\n```js\n// C2: Region Selector Sub‑Panel\n\nvar regionPanel = ui.Panel({\n  layout: ui.Panel.Layout.flow('vertical'),\n  style: { margin:'8px 0 0 0' }\n});\n\nmainPanel.add(regionPanel);\nregionPanel.add(ui.Label(\n  'Step 1: Select Your Region',\n  { fontWeight:'bold', fontSize:'14px' }\n));\nregionPanel.add(ui.Label(\n  'First choose a country to zoom in, then pick a province. The layers may take up to one minute to fully process after each click.',\n  { whiteSpace:'wrap', fontSize:'12px' }\n));\n\nvar countrySelect  = ui.Select({ placeholder:'Select Country' });\nvar provinceSelect = ui.Select({ placeholder:'Select Province' });\nregionPanel.add(ui.Label('Country:',  { fontWeight:'bold', fontSize:'12px' }));\nregionPanel.add(countrySelect);\nregionPanel.add(ui.Label('Province:', { fontWeight:'bold', fontSize:'12px' }));\nregionPanel.add(provinceSelect);\n```\n\n`C3` adds a `homeButton` to reset the map/UI and formats metadata displays as tables with `addInfoRow`.  \n\n```js\n// C3: Info Panel & Home Button\n\nvar infoPanel = ui.Panel({ layout: ui.Panel.Layout.flow('vertical') });\nmainPanel.add(infoPanel);\n\nvar homeButton = ui.Button({\n  label: 'Home',\n  style: { stretch:'horizontal', margin:'8px 0 0 0' },\n  onClick: function() {\n    Map.setCenter(120, 40, 4);\n    Map.setOptions('SATELLITE');\n    Map.layers().forEach(function(l){\n      if (l.getName()==='Province Outline') Map.remove(l);\n    });\n    regionPanel.clear();\n    regionPanel.add(ui.Label(\n      'Step 1: Select Your Region',\n      { fontWeight:'bold', fontSize:'18px' }\n    ));\n    regionPanel.add(ui.Label(\n      'First choose a country to zoom in, then pick a province. The layers may take up to one minute to fully process after each click.',\n      { whiteSpace:'wrap', fontSize:'12px' }\n    ));\n    regionPanel.add(ui.Label('Country:',  { fontWeight:'bold', fontSize:'12px' }));\n    regionPanel.add(countrySelect);\n    regionPanel.add(ui.Label('Province:', { fontWeight:'bold', fontSize:'12px' }));\n    regionPanel.add(provinceSelect);\n    infoPanel.clear();\n    mainPanel.remove(homeButton);\n  }\n});\n\nMap.add(mainPanel);\n\nfunction addInfoRow(name, widget) {\n  infoPanel.add(ui.Panel([\n    ui.Label(name + ':', { fontWeight:'bold', fontSize:'12px' }),\n    widget\n  ], ui.Panel.Layout.flow('horizontal')));\n}\n```\n\n`C4-C5` updates province options and overlays province boundaries (`provincesOutlineImage`) on country selection for more detailed jurisdiction selection.\n\n```js\n// C4: Populate countries (Step 1)\n\nvar hotspotCountries = countries.filterBounds(hotspotPolygons.geometry());\nhotspotCountries.aggregate_array('ADM0_NAME')\n  .distinct().sort()\n  .evaluate(function(list) {\n    countrySelect.items().reset(list);\n  });\n\n// C5: Switch from countries to provinces (Step 1)\n\ncountrySelect.onChange(function(countryName) {\n  var provs = provinces\n    .filter(ee.Filter.eq('ADM0_NAME', countryName))\n    .filterBounds(hotspotPolygons.geometry())\n    .aggregate_array('ADM1_NAME')\n    .distinct()\n    .sort();\n\n  provs.evaluate(function(list) {\n    if (Array.isArray(list) && list.length) {\n      provinceSelect.items().reset(list);\n    } else {\n      provinceSelect.items().reset(['(No provinces)']);\n    }\n  });\n\n  var selectedCountryFeatures = hotspotCountries.filter(\n    ee.Filter.eq('ADM0_NAME', countryName)\n  );\n  Map.centerObject(selectedCountryFeatures, 5);\n\n  Map.layers().forEach(function(layer) {\n    if (layer.getName() === 'Province Outline') {\n      Map.remove(layer);\n    }\n  });\n\n  var provincesOutlineImage = ee.Image().byte().paint({\n    featureCollection: provinces.filter(ee.Filter.eq('ADM0_NAME', countryName)),\n    color: 1,\n    width: 1\n  });\n  Map.addLayer(\n    provincesOutlineImage,\n    { palette: ['black'] },\n    'Province Outline',\n    true\n  );\n});\n```\n\n`C6` prepares UI placeholders for environmental metrics (NDVI, Temp, etc.) but only computes values on hotspot click to avoid resource waste.  \n\n```js\n// C6: Switch from provinces to info extraction (Step 2) \n\nprovinceSelect.onChange(function(provinceName) {\n  if (provinceName === '(No provinces)') return;\n  Map.centerObject(\n    provinces.filter(ee.Filter.eq('ADM1_NAME', provinceName)),\n    8\n  );\n  regionPanel.clear();\n  regionPanel.add(ui.Label(\n    'Step 2: Retrieve Hotspot Info',\n    { fontWeight:'bold', fontSize:'18px' }\n  ));\n  regionPanel.add(ui.Label(\n    'Click any hotspot to retrieve the its crane peak season, total cranes detected, and four important environmental components known to be important to aspects of crane natural history (Batbayar et al., 2024). The layers loading and computation may take up to one minute to process.',\n    { whiteSpace:'wrap', fontSize:'12px' }\n  ));\n  regionPanel.add(ui.Label('Peak Season:',      { fontWeight:'bold', fontSize:'12px' }));\n  regionPanel.add(ui.Label('Season with maximum crane density in the hotspot.', { whiteSpace:'wrap', fontSize:'12px' }));\n  regionPanel.add(ui.Label('Total Cranes:',      { fontWeight:'bold', fontSize:'12px' }));\n  regionPanel.add(ui.Label('Number of crane observations recorded in the hotspot.', { whiteSpace:'wrap', fontSize:'12px' }));\n  regionPanel.add(ui.Label('In Reserve:',       { fontWeight:'bold', fontSize:'12px' }));\n  regionPanel.add(ui.Label('Whether the hotspot overlaps a protected nature reserve.', { whiteSpace:'wrap', fontSize:'12px' }));\n  regionPanel.add(ui.Label('Average NDVI (Normalized Difference Vegetation Index):',     { fontWeight:'bold', fontSize:'12px' }));\n  regionPanel.add(ui.Label('Mean NDVI during peak season (2018–2021).', { whiteSpace:'wrap', fontSize:'12px' }));\n  regionPanel.add(ui.Label('Average Temp (°C):',{ fontWeight:'bold', fontSize:'12px' }));\n  regionPanel.add(ui.Label('Mean 2 m air temperature during peak season (2018–2021).',{ whiteSpace:'wrap', fontSize:'12px' }));\n  regionPanel.add(ui.Label('Average NO2:',      { fontWeight:'bold', fontSize:'12px' }));\n  regionPanel.add(ui.Label('Mean tropospheric NO2 column density during peak season (2018–2021).',{ whiteSpace:'wrap', fontSize:'12px' }));\n  regionPanel.add(ui.Label('Water Fraction:',   { fontWeight:'bold', fontSize:'12px' }));\n  regionPanel.add(ui.Label('Proportion of surface water presence during peak season (2018–2021).',{ whiteSpace:'wrap', fontSize:'12px' }));\n  \n});\n```\n\n`C7` triggers on map click:  \n- Validates clicks on hotspots via `enrichedHotspots.filterBounds(pt).first()`.  \n- Computes environmental metrics using `reduceRegion` on a 500m buffer, with scale-dependent sampling (30m for water, 1000m for Temp/NO2).  \n- Formats results: NO2 in scientific notation, NDVI to 3 decimals.  \n\n```js\n// C7: Map click (Step 2)\n\nMap.onClick(function(coords) {\n  regionPanel.clear();                \n  infoPanel.clear();\n  var pt = ee.Geometry.Point([coords.lon, coords.lat]);\n  enrichedHotspots.filterBounds(pt).first().evaluate(function(f) {\n    if (!f) {\n      infoPanel.add(ui.Label('No hotspot here.'));\n    } else {\n      infoPanel.add(ui.Label(\n        'Hotspot Info',\n        { fontWeight:'bold', fontSize:'16px'}\n      ));\n      addInfoRow('- Peak Season',    ui.Label(f.properties.peakSeason));\n      addInfoRow('- Total Cranes',    ui.Label(f.properties.totalCranes));\n      addInfoRow('- In Reserve',      ui.Label(f.properties.inReserve?'Yes':'No'));\n      var placeholders = {};\n      [\n        {band:'NDVI', key:'- Average NDVI',     scale:500},\n        {band:'Temp', key:'- Average Temp (°C)',scale:1000},\n        {band:'NO2',  key:'- Average NO2',      scale:1000},\n        {band:'Water',key:'- Water Fraction',    scale:30}\n      ].forEach(function(o) {\n        var lbl = ui.Label('Calculating…');\n        placeholders[o.key] = lbl;\n        addInfoRow(o.key, lbl);\n      });\n      var dict = ee.Dictionary(envComposites.get(f.properties.peakSeason));\n      [\n        {band:'NDVI', key:'- Average NDVI',     scale:500},\n        {band:'Temp', key:'- Average Temp (°C)',scale:1000},\n        {band:'NO2',  key:'- Average NO2',      scale:1000},\n        {band:'Water',key:'- Water Fraction',    scale:30}\n      ].forEach(function(o) {\n        ee.Image(dict.get(o.band)).reduceRegion({\n          reducer: ee.Reducer.mean(),\n          geometry: pt.buffer(500),\n          scale:    o.scale,\n          maxPixels:1e9\n        }).evaluate(function(val) {\n          var raw = val && val[o.band];\n          var num = raw === null ? null : Number(raw);\n          var txt = num === null ? 'N/A'\n            : (o.key==='- Average NO2'\n               ? num.toExponential(2)\n               : num.toFixed(o.key==='- Average NDVI'?3:2));\n          placeholders[o.key].setValue(txt);\n        });\n      });\n    }\n    mainPanel.add(homeButton);\n  });\n});\n```\n\n`C8` adds a legend via `makeLegendSymbol`, using red (hotspots), white (corridor), and green (reserves) symbols positioned at the bottom-right. \n\n```js\n// C8: Legend\n\nvar legend = ui.Panel({\n  style: {\n    position: 'bottom-right', padding: '8px', backgroundColor: 'white'\n  }\n});\nlegend.add(ui.Label('Legend',\n  {fontWeight:'bold', fontSize:'16px', margin:'0 0 4px 0'}\n));\n\nfunction makeLegendSymbol(fillColor, borderColor, name) {\n  return ui.Panel([\n    ui.Label('', {\n      backgroundColor: fillColor,\n      padding: '8px',\n      margin:  '0 0 4px 0',\n      width:   '18px',\n      height:  '18px',\n      border:  '1px solid ' + borderColor\n    }),\n    ui.Label(name, {margin:'0 0 4px 6px'})\n  ], ui.Panel.Layout.flow('horizontal'));\n}\nlegend.add(makeLegendSymbol('rgba(255,0,0,0.53)', '#FF0000', 'Crane Hotspot'))\n      .add(makeLegendSymbol('#FFFFFF',         '#000000', 'Migration Corridor'))\n      .add(makeLegendSymbol('rgba(0,100,0,0.53)', '#006400', 'Nature Reserves'));\nMap.add(legend);\n```\n\n### References\n\nBatbayar, N., Galtbalt, B., Natsagdorj, T., et al. (2024) White-naped crane Mongolia WSCC. Movebank Data Repository. Available at: https://doi.org/10.5441/001/1.600.\n\nCollen, B., Pettorelli, N., Baillie, J.E.M., et al. (2013) “Biodiversity Monitoring and Conservation: Bridging the Gaps Between Global Commitment and Local Action.” In Collen, B., Pettorelli, N., Baillie, J.E.M., et al. (eds.) Biodiversity Monitoring and Conservation. 1st ed. Wiley. pp. 1–16. doi:10.1002/9781118490747.ch1.\n\nRose, D.C., Sutherland, W.J., Amano, T., et al. (2018) The major barriers to evidence‐informed conservation policy and possible solutions. Conservation Letters, 11 (5): e12564. doi:10.1111/conl.12564.\n\nRunge, C.A., Martin, T.G., Possingham, H.P., et al. (2014) Conserving mobile species. Frontiers in Ecology and the Environment, 12 (7): 395–402. doi:10.1890/130237.\n\nTurner, W., Spector, S., Gardiner, N., et al. (2003) Remote sensing for biodiversity science and conservation. Trends in ecology & evolution, 18 (6): 306–314.\n\nWilcove, D.S. and Wikelski, M. (2008) Going, going, gone: is animal migration disappearing. PLoS biology, 6 (7): e188.\n\nYanco, S.W., Oliver, R.Y., Iannarilli, F., et al. (2024) Migratory birds modulate niche tradeoffs in rhythm with seasons and life history. Proceedings of the National Academy of Sciences, 121 (41): e2316827121. doi:10.1073/pnas.2316827121.","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","highlight-style":"monokai.theme","output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.28","book":{"title":"CASA0025 Final Assessment","author":"Group Name","date":"01/01/2024","chapters":["index.qmd"],"repo-actions":["edit"],"downloads":["pdf","epub"],"sharing":["twitter","facebook"],"favicon":"favicon.ico","sidebar":{"logo":"casa_logo.png"}},"theme":{"dark":"darkly","light":"cosmo"},"code-copy":true,"linkcolor":"#34a832"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}